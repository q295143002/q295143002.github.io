!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=59)}([function(e,t,n){"use strict";var r,o,i,a,s,c;n.d(t,"d",(function(){return r})),n.d(t,"f",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"e",(function(){return a})),n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return c})),function(e){e.PROD="PROD",e.FAT="FAT",e.FWS="FWS",e.UAT="UAT",e.DEV="DEV",e.BATTLE="BATTLE",e.unknown="unknown"}(r||(r={})),function(e){e.H5="H5",e.Online="Online",e.Hybrid="Hybrid",e.RN="RN",e.Node="Node",e.Bff="Bff"}(o||(o={})),function(e){e.ctrip="ctrip",e.trip="trip"}(i||(i={})),function(e){e["2G"]="2G",e["3G"]="3G",e["4G"]="4G",e.offline="offline",e.unknown="unknown"}(a||(a={})),function(e){e.wechat="WAP/WECHATAPP",e.qq="WAP/QQAPP",e.toutiao="WAP/TOUTIAOAPP",e.baidu="WAP/BAIDUAPP",e.alipay="WAP/ALIPAYAPP",e.quick="WAP/QUICKQPP",e.none="none"}(s||(s={})),function(e){e.wechat="wx0e6ed4f51db9d078",e.qq="1109981246",e.toutiao="ttaf70d9cd305a16cb",e.baidu="11048657",e.alipay="2017081708237081",e.quick="",e.none=""}(c||(c={}))},function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return v})),n.d(t,"d",(function(){return _})),n.d(t,"f",(function(){return b})),n.d(t,"c",(function(){return w})),n.d(t,"a",(function(){return O})),n.d(t,"e",(function(){return E}));var r=n(0),o=n(37),i=n(49),a=n(28),s=n(50),c=n(51),u=n(24),l=n(52),f=n(18),p=n(29),d=n(39);n.d(t,"g",(function(){return d.a}));var h=n(10),m=function(){return(m=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},g=null,y=null,v=function(){return g.platform===r.f.RN?Object(f.b)():Object(s.a)()},_=function(e,t){var n=Object(u.c)(e),o=Object(u.b)(e);if(!1!==n)return m({},n);if(!1!==o)return o;t&&(y=null);var i=null,s=Object(a.a)();if(s===r.f.Node&&!e)return{};if(Object(a.a)()!==r.f.Node&&null!=y&&y.vid)return y;var l=b(e);i=l.platform===r.f.RN?Object(f.a)():l.platform===r.f.Node?new u.a(e).getValue():Object(c.a)(e);var d=s==r.f.RN?Object(h.c)()?"30":"12":"09";return Object.assign(i,l,{log_version:p.a.getVer(),syscode:d}),s!==r.f.Node&&(g=l,y=i),i},b=function(e){var t=Object(u.c)(e),n=Object(u.b)(e);if(!1!==t)return m({},t);if(!1!==n)return n;var s=Object(a.a)(),c=g;return s!==r.f.Node&&null!=c&&c.enviroment||(c={platform:s,enviroment:Object(o.a)(s,e),nodePlatform:Object(a.b)(e),channel:Object(i.a)(s,e)}),c.platform===r.f.Hybrid&&c.enviroment===r.d.unknown&&(c.enviroment=Object(o.b)()),s!==r.f.Node&&(g=c),c},w=function(){var e=b(),t=l.a.getMarsUrl(_().cid);switch(e.enviroment){case r.d.DEV:case r.d.FAT:return e.platform===r.f.Node?"http://gateway.m.fws.qa.nt.ctripcorp.com/restapi/soa2/":e.platform===r.f.RN?t:e.platform===r.f.Hybrid?"https://m.fat.ctripqa.com/restapi/soa2/":e.channel===r.c.ctrip?window.location.protocol+"//gateway.m.fws.qa.nt.ctripcorp.com/restapi/soa2/":window.location.protocol+"//"+(e.enviroment===r.d.DEV?"www.fat1.qa.nt.tripcorp.com":window.location.host)+"/restapi/soa2/";case r.d.UAT:return e.platform===r.f.Node||e.platform===r.f.RN?"https://gateway.m.uat.qa.nt.ctripcorp.com/restapi/soa2/":"https://m.uat.ctripqa.com/restapi/soa2/";default:return e.platform===r.f.Node?"https://apigateway.ctripcorp.com/restapi/soa2/":e.platform===r.f.RN?"https://m.ctrip.com/restapi/soa2/":e.channel===r.c.trip?"https://www.trip.com/restapi/soa2/":"https://m.ctrip.com/restapi/soa2/"}},O=function(){var e=b();switch(e.enviroment){case r.d.DEV:case r.d.FAT:return"https://www.fat1.qa.nt.ctripcorp.com/ttd/bff/graphql";case r.d.UAT:return"https://www.uat.qa.nt.ctripcorp.com/ttd/bff/graphql";default:return e.platform===r.f.Node?"https://apigateway.ctripcorp.com/restapi/soa2/":e.platform===r.f.RN?"https://m.ctrip.com/restapi/ttd/bff/graphql":e.channel===r.c.trip?"https://www.trip.com/restapi/ttd/bff/graphql":"https://m.ctrip.com/restapi/ttd/bff/graphql"}},E=function(){return void 0!==e&&"undefined"==typeof window}}).call(this,n(33))},function(e,t){e.exports=React},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r={},o=null,i=null,a=[],s=r;t.b={add:function(e,t,n){r[e]={component:t,assistComponent:n}},get:function(e){return e?r[e]:r},change:function(e,t){t&&Object.assign(r[e].assistComponent,t),a.indexOf(e)>-1?i.setState({assistComponent:t}):(o.setState({}),o.onSetPopLayer&&o.onSetPopLayer({assistComponent:r}))},register:function(e){o=e},registerInner:function(e,t){i=e,a=t||[]}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(1),o=n(0),i={compare:function(e,t){return e&&t?new Date(e.replace(/-/g,"/")).getTime()==new Date(t.replace(/-/g,"/")).getTime()?2:new Date(e.replace(/-/g,"/")).getTime()>new Date(t.replace(/-/g,"/")).getTime()?1:0:0},getDays:function(e,t){return Math.round(new Date(t).getTime()-new Date(e).getTime())/864e5+1},addDays:function(e,t){var n=new Date(Date.parse(e.replace(/-/g,"/")));return n.setDate(n.getDate()+t),i.getDateString(n)},getDateString:function(e,t){var n,r,o;if(void 0===t&&(t="-"),"string"==typeof e){var i=e.split("-");n=parseInt(i[0],10),r=parseInt(i[1],10),o=parseInt(i[2],10)}else{var a=new Date(e);n=a.getFullYear(),r=a.getMonth()+1,o=a.getDate()}return n+t+(r<10?"0"+r:r)+t+(o<10?"0"+o:o)},getDateTimeString:function(e,t){void 0===t&&(t="-");var n=e.getHours(),r=e.getMinutes(),o=e.getSeconds();return i.getDateString(e,t)+" "+(n<10?"0"+n:n)+":"+(r<10?"0"+r:r)+":"+(o<10?"0"+o:o)},formatDate:function(e){if(!e)return"";var t=new Date(i.covertToValidTime(e)),n=t.getMonth()+1,a=t.getDate(),s=Object(r.d)().language.toLowerCase();return s.indexOf("kr")>-1?n+"월"+a+"일(목)":s.indexOf("ja")>-1?n+"月"+a+"日(木)":s.indexOf("zh")>-1?n+"月"+a+"日":Object(r.f)().channel===o.c.trip?i.getMonthsTitle(n)+" "+a:n+"月"+a+"日"},getMonthsTitle:function(e){var t=Object(r.d)().language.toLowerCase();return t.indexOf("kr")>-1?e+"월":t.indexOf("zh")>-1||t.indexOf("jp")>-1?e+"月":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e-1]},getYearMonthsTitle:function(e,t){var n=Object(r.d)().language.toLowerCase();return n.indexOf("kr")>-1?e+"년 "+t+"월":n.indexOf("zh")>-1||n.indexOf("jp")>-1?e+"年 "+t+"月":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t-1]+" "+e},getYearMonthDateTitle:function(e){if("undefined"!=typeof l10n)return l10n.DateTimeFormat(Object(r.d)().language).ymdFullString(new Date(e.replace(/-/g,"/")).getTime());var t,n,o,i=e.split("-");t=parseInt(i[0],10),n=parseInt(i[1],10),o=parseInt(i[2],10);var a=Object(r.d)().language.toLowerCase();return a.indexOf("kr")>-1?t+"년 "+n+"월 "+o+"일":a.indexOf("zh")>-1||a.indexOf("jp")>-1?t+"年 "+n+"月 "+o+"日":o+" "+["January","February","March","April","May","June","July","August","September","October","November","December"][n-1]+","+t},getDayWeek:function(e){return"周"+{1:"一",2:"二",3:"三",4:"四",5:"五",6:"六",0:"日"}[new Date(e.replace(/-/g,"/")).getDay()]},covertToValidTime:function(e){return e&&"string"==typeof e?e.replace(/-/g,"/"):e},getYearMonthDayNumber:function(e){var t=new Date(i.covertToValidTime(e)),n=t.getFullYear(),r=t.getMonth()+1,o=t.getDate();return""+n+(r<10?"0"+r:r)+(o<10?"0"+o:o)},getHourMinute:function(e){var t=new Date(i.covertToValidTime(e)),n=t.getHours(),r=t.getMinutes();return(n<10?"0"+n:n)+":"+(r<10?"0"+r:r)},isToday:function(e,t){e=i.covertToValidTime(e),t=i.covertToValidTime(t);var n=new Date(e),r=t?new Date(t):new Date;return n.getFullYear()===r.getFullYear()&&n.getMonth()===r.getMonth()&&n.getDate()===r.getDate()},dayMinusToday:function(e,t){e=i.covertToValidTime(e),t=i.covertToValidTime(t);var n=new Date(e).getTime(),r=t?new Date(t).getTime():(new Date).getTime();if(r>=n)return 0;var o=n-r;return Math.ceil(o/864e5)},isContinousDay:function(e){if(!e||!e.length)return!1;var t=e.sort(),n=0,r=!0;return t.forEach((function(e){if(r){var t=new Date(i.covertToValidTime(e)).getTime();n&&(r=t-n<=864e5),n=t}})),r},surpassOneDay:function(e,t){if(e){e=i.covertToValidTime(e),t=i.covertToValidTime(t);var n=new Date(e).getTime(),r=t?new Date(t).getTime():(new Date).getTime();return Math.abs(n-r)>864e5}},isSameDay:function(e,t){if(e){e=i.covertToValidTime(e),t=i.covertToValidTime(t);var n=new Date(e),r=t?new Date(t):new Date;return n.getFullYear()==r.getFullYear()&&n.getMonth()==r.getMonth()&&n.getDate()==r.getDate()}},leftTimeToHourMinSec:function(e){if(e&&Number(e)){e=i.covertToValidTime(e);var t=Number(e)/1e3,n=Math.floor(t/3600),r=Math.floor((t-60*n*60)/60),o=Math.floor(t-60*n*60-60*r);return(n?n+":":"")+(r<10?"0"+r+":":r+":")+(o<10?"0"+o:o)}}},a=i,s=function(e,t){if(Object(r.e)())return null;var n=null;if(t){var o=JSON.parse(localStorage.getItem(t)||"{}")[e];o&&o.reg>=Date.now()&&(n=o.val)}else n=localStorage.getItem(e);return n},c=function(e,t,n,o,i){if(void 0===n&&(n=1440),Object(r.e)())return null;var s=JSON.parse(localStorage.getItem(o)||"{}"),c=new Date;c.setMinutes(c.getMinutes()+n),i?(s[e]={reg:c.getTime(),val:t},localStorage.setItem(o,JSON.stringify(s))):(t.timeout=a.getDateTimeString(c,"/"),localStorage.setItem(e,JSON.stringify(t)))},u=function(e,t){if(Object(r.e)())return null;var n=JSON.parse(localStorage.getItem(t)||"{}");delete n[e],localStorage.setItem(t,JSON.stringify(n))},l=function(e){return Object(r.e)()?null:sessionStorage.getItem(e)},f=function(e,t){if(Object(r.e)())return null;t="string"==typeof t?t:JSON.stringify(t),sessionStorage.setItem(e,t)},p=function(e){if(Object(r.e)())return null;sessionStorage.removeItem(e)},d=function(e){if(!Object(r.e)()){var t=document.cookie.match(new RegExp("(^| )"+e+"=([^;]*)(;|$)"));return null!=t?decodeURIComponent(t[2]):null}},h=null,m={module:"ottd",get:function(e,t,n,r,o){if(void 0===t&&(t=!1),void 0===n&&(n={}),void 0===o&&(o=!0),n=n||{},h)return h.get(e,this.module,r);var i=n.cookies?n.cookies[e]:s(e,o?this.module:null)||l(e);return null==i&&null==n.cookies&&(i=d(e)),null!=i&&t&&"string"==typeof i&&(i=JSON.parse(i)),r&&r(i),i},set:function(e,t,n,r,o){if(void 0===o&&(o=!0),h)return h.set(e,t,r||this.module);0===n?f(e,t):this.module&&c(e,t,n,r||this.module,o)},clear:function(e,t){if(h)return h.clear(e,this.module);0===t?p(e):u(e,this.module)},register:function(e){void 0===e&&(e="ottd"),this.module=e}}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.info="info",e.warning="warning",e.error="error",e.fatal="fatal"}(r||(r={}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return g})),n.d(t,"e",(function(){return v})),n.d(t,"d",(function(){return _})),n.d(t,"a",(function(){return b})),n.d(t,"c",(function(){return w})),n.d(t,"g",(function(){return O})),n.d(t,"h",(function(){return E})),n.d(t,"f",(function(){return S}));var r=n(30);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}function s(e){var t=p();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?u(e):t}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e){var t="function"==typeof Map?new Map:void 0;return(l=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return f(e,arguments,h(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),d(r,e)})(e)}function f(e,t,n){return(f=p()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&d(o,n.prototype),o}).apply(null,arguments)}function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g=function(e){a(n,e);var t=s(n);function n(e,r){var o,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return i(this,n),m(u(o=t.call(this,"")),"url",void 0),m(u(o),"option",void 0),m(u(o),"status",void 0),m(u(o),"statusText",void 0),m(u(o),"headers",void 0),m(u(o),"data",void 0),m(u(o),"originError",void 0),m(u(o),"isRequestError",void 0),m(u(o),"event",void 0),y(e,r,a),Object.assign(u(o),e),o.message=e.message,o.stack=e.stack,o.originError=e,o.url=r.url||"",o.option=r,o.status=a.status,o.statusText=a.statusText,o.headers=a.headers,o.data=a.data,o.isRequestError=!0,o}return n}(l(Error));function y(e,t,n){if(e.message="request ".concat(t.method,' "').concat(t.url,'" ').concat(n.status||"fail",": ").concat(e.message),e.stack=e.stack||"empty stack",n.data){var o=Object(r.a)(n.data);o.CLOGGING_TRACE_ID&&(e.message+='\nCLOGGING_TRACE_ID: "'.concat(o.CLOGGING_TRACE_ID,'"')),o.RootMessageId&&(e.message+='\nRootMessageId: "'.concat(o.RootMessageId,'"'))}}var v=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=O(e)?e:new g(e,t,n);return r},_=function(e){a(n,e);var t=s(n);function n(e,r){var o;return i(this,n),o=t.call(this,"promise timeout of ".concat(e,"ms exceeded")),r&&(o.stack=r),o}return n}(l(Error)),b=function(e){a(n,e);var t=s(n);function n(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1?arguments[1]:void 0,a=arguments.length>2?arguments[2]:void 0;return i(this,n),m(u(e=t.call(this,"request aborted".concat(r?", because: ".concat(r):""))),"isCancelByUser",void 0),o&&(e.stack=o),e.isCancelByUser=null!=a?a:r===n.MANUAL_ABORT_MESSAGE,e}return n}(l(Error));m(b,"MANUAL_ABORT_MESSAGE","user manual abort request"),m(b,"MANUAL_ABORT_ERROR",(function(){return new b(b.MANUAL_ABORT_MESSAGE,void 0,!0)}));var w=function(e){a(n,e);var t=s(n);function n(e,r){var o;return i(this,n),m(u(o=t.call(this,'Soa "'.concat(r.serviceCode||"UnknownService",".").concat(r.method,'" response status or code error'))),"response",void 0),m(u(o),"request",void 0),o.request=r,o.response=e,o}return n}(l(Error));function O(e){return"boolean"==typeof e.isRequestError}function E(e){var t=O(e)?e.originError:e;return t instanceof _||t.message.indexOf("timeout")>-1}function S(e){var t=O(e)?e.originError:e;return t instanceof b||t.message.indexOf("aborted")>-1}},function(e,t,n){"use strict";n.d(t,"c",(function(){return s})),n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return u})),n.d(t,"d",(function(){return l}));var r=null,o=null,i=null,a=n(1),s=(n(0),function(e){return r?r(e):e}),c=function(e,t,n,r,i){o?o(t,e,n,r,i):e.setState(t)},u=function(e,t,n,r){if(void 0===r&&(r=!0),o)e.scrollTo({x:t?t.to:0,y:n?n.to:0,animated:r});else if(t&&t.target)t.target.setState({sPosition:t.to,speed:r?t.target.speed:0});else if(t&&t.from!==t.to)var i=Math.ceil(Math.abs(t.to-t.from)/10),s=t.from<t.to?"right":"left",c=requestAnimationFrame((function n(){"right"==s?t.from+=i:t.from-=i,e.scrollTo(t.from,0),c=requestAnimationFrame(n),("right"===s&&t.from>=t.to||"left"===s&&t.from<=t.to)&&cancelAnimationFrame(c)}));else if(n&&n.from!==n.to)var u=n.from<n.to?"down":"up",l="Online"==Object(a.f)().platform?Math.abs(n.to-n.from)/20:Math.ceil(Math.abs(n.to-n.from)/10),f=requestAnimationFrame((function e(){"down"==u?n.from+=l:n.from-=l;var t=n.from;"down"===u&&(t=n.from<=n.to?n.from:n.to),"up"===u&&(t=n.from>=n.to?n.from:n.to),window&&window.scrollTo(0,t),f=requestAnimationFrame(e),("down"===u&&n.from>=n.to||"up"===u&&n.from<=n.to)&&cancelAnimationFrame(f)}))},l=function e(t,n,r){var o=null;if(i)return i(t,n,r);if(n.length>0){var a=n.shift();r&&r(a.toValue),o=setTimeout((function(){o&&clearTimeout(o),o=null,e(t,n,r)}),t||0)}}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(1),o=n(2),i=n.n(o),a={domain:"ottd-smart",windowDomain:"smart",getDomain:function(e){return e=e||{},Object(r.e)()?e[this.domain]:window[this.windowDomain]},getGlobal:function(t){return void 0!==e?e[t]:""},init:function(e){Object(r.e)()?e[this.domain]||(e[this.domain]={}):window[this.windowDomain]||(window[this.windowDomain]={})},set:function(e,t,n){var r=this.getDomain(e);"string"==typeof n?(this.init(e),r[t]=n):Object.assign(r,n)},get:function(e,t){if("string"==typeof t){var n="";n=t.indexOf("$")>-1?t.replace("$",""):"$"+t,this.init(e);var r=this.getDomain(e);return r[t]||r[n]||this.getGlobal(t)||this.getGlobal(n)}return""},context:{},createContext:function(e,t){return this.context[e]=i.a.createContext(t||null),this.context[e]},getContext:function(e){return this.context[e]||i.a.createContext(null)}}}).call(this,n(38))},function(e,t,n){"use strict";n.d(t,"a",(function(){return E})),n.d(t,"c",(function(){return S})),n.d(t,"d",(function(){return C})),n.d(t,"e",(function(){return j})),n.d(t,"b",(function(){return T}));var r=n(5),o=n(1),i=n(0),a={},s=0,c=Date.now(),u=function(e,t){e.actionUrl.indexOf("12530/json/crawlerScripting")>-1||T({title:"网络请求",actionUrl:e.actionUrl,apiUrl:e.apiUrl,pageId:e.pageId,errorCode:t.errorCode,message:t.message,request:JSON.stringify(e.request||{}),response:JSON.stringify(t.response||{}),type:null!=t.errorCode?r.a.error:r.a.info,time:Math.ceil(Date.now()-e.startTime),tags:{demeter:"networkLog"}})},l=function(e){return setTimeout((function(){T({title:"首屏时间",time:e,type:r.a.info,tags:{demeter:"firstScreen"}})}),1e3)},f=function(e,t){var n=Object(o.f)();clearTimeout(s),n.platform!==i.f.RN?"undefined"!=typeof performance?s=l(Math.ceil(performance.now())):T({title:"performance不支持",content:"无法拿到首屏数据",type:r.a.warning}):s=l(Math.ceil(Date.now()-e.startTime||c))},p=n(14),d=null,h=function(e,t){if(void 0===t&&(t="tracelog"),e)return null!=d?d(e,t):void(Object(o.e)()||(window.__bfi=window.__bfi||[]).push(["_tracklog",e.key,JSON.stringify(e)]))},m=[],g=function(e,t,n){return function(){n&&e&&e.tags?e.tags.isCacheLog=!0:n&&t&&t.tags&&(t.tags.isCacheLog=!0);var i=e||t;i.type=i.type||r.a.info,function(e,t,n){var r=e||t;if(r.tags&&r.tags.demeter){var i={key:r.tags.demeter};switch(r.tags.demeter){case"jsError":Object.assign(i,{message:r.tags.message});break;case"orderBlock":Object.assign(i,{message:r.content||r.tags.message,errorCode:r.tags.errorCode});break;case"domReady":case"firstScreen":Object.assign(i,{message:r.time,time:r.time});break;case"networkLog":null!=r.errorCode?Object.assign(i,{message:r.message,errorCode:r.errorCode,networkLogType:"error"}):Object.assign(i,{message:"success",networkLogType:"info"});break;default:Object.assign(i,{message:r.content,errorCode:r.tags.errorCode})}if(i.message){var a={},s=n||{};Object.assign(a,i,s,Object(o.d)()),h(a)}}}(e,t,{}),~~i.pageId||(i.pageId=E.pageId),Object(p.a)({request:i,actionUrl:E.sendURL,success:function(e){}},null,!0)}},y=null,v=function(e){return e?e instanceof Error?JSON.stringify({message:e.message,stack:e.stack}):e instanceof Object?JSON.stringify(e):void 0:""},_=function(e,t){var n=e||t;n&&n.tags&&n.tags.message&&(n.tags.message=v(n.tags.message)),setTimeout((function(){try{!function(e,t){if(E.sendURL){var n=g(e,t),r=Object(o.d)();if(r.enviroment===i.d.PROD&&r.platform!==i.f.RN&&!r.vid)return void m.push(n);clearTimeout(y),y=null,n(),function(e){e.length>0&&(e.forEach((function(e){"function"==typeof e&&e()})),e.length=0)}(m)}else{n=g(e,t,!0);m.push(n),y||(y=setTimeout((function(){m.length=0,clearTimeout(y),y=null}),2e3))}}(e,t)}catch(r){var n=e||t||{};n.message="日志发送时错误，"+v(r),n.type="error",n.stack=r&&r.stack,Object(p.a)({request:n,actionUrl:"16879/sendlog",success:function(e){}},null,!0)}}),0)},b=function(e){T({title:"白屏时间",time:Math.ceil(e),type:r.a.info,tags:{demeter:"domReady"}})};if("undefined"!=typeof document){var w=document.addEventListener?{type:"addEventListener",ready:"DOMContentLoaded"}:{type:"attachEvent",ready:"onreadystatechange"};"undefined"!=typeof performance?"complete"===document.readyState||"interactive"===document.readyState?setTimeout((function(){b(performance.timing.domContentLoadedEventEnd-performance.timing.navigationStart)})):document[w.type](w.ready,(function(){b(performance.now())}),!1):T({title:"performance不支持",content:"无法拿到白屏数据",type:r.a.warning}),window[w.type]("error",(function(e){e&&e.message&&T({title:"客户端脚本报错",type:r.a.error,tags:{message:e||"未知错误",demeter:"jsError"}})}),!0),window[w.type]("unhandledrejection",(function(e){T({title:"客户端脚本报错",type:r.a.error,tags:{message:(e||window.event)&&(e||window.event).reason||"未知错误",demeter:"jsError"}})}))}var O=n(29),E={sendPVFlag:!1},S=function(e){e.sendURL=e.sendURL||"16879/sendlog",Object.assign(E,e)},C=function(e){return function(e){if(Object(o.f)().platform===i.f.Node)return"";e.startTime=Date.now();var t=Math.ceil(1e5*Math.random()).toString();return a[t]=e,t}(e)},j=function(e){!function(e){if(Object(o.f)().platform!==i.f.Node){var t=a[e.token];if(delete a[e.token],void 0===t)return T({title:"network_log接入方式错误",content:"空指针",type:r.a.error});var n=e.req;delete e.req,null==n&&!0===t.isFirstScreen&&f(t,e),u(t,e)}}(e)},T=function(e,t){e&&(e.timeLine=(new Date).getTime()),t&&(t.timeLine=(new Date).getTime()),E.sendPVFlag||(_({title:"PV",type:r.a.info,timeLine:(new Date).getTime(),tags:{demeter:"pv"}}),E.sendPVFlag=!0),_(e,t)};O.a},function(e,t,n){"use strict";n.d(t,"e",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return u})),n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(1);n(0);function o(){if("undefined"!=typeof document&&"undefined"!=typeof window){var e=window.navigator&&window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPod)(.*OS\s([\d_]+))?/),r=!e.match(/(iPad)(.*OS\s([\d_]+))?/)&&e.match(/(iPhone\sOS)\s([\d_]+)/),o=1<e.indexOf("Windows Phone");return!(t||n||r||o)}}function i(e){return e?/MicroMessenger/i.test(e.headers["user-agent"]):"undefined"!=typeof window&&/MicroMessenger/i.test(window.navigator.userAgent)}function a(e){return e?i(e)&&/miniProgram/i.test(e.headers["user-agent"]):"undefined"!=typeof window&&(i()&&("miniprogram"===window.__wxjs_environment||/miniProgram/i.test(window.navigator.userAgent)))}function s(e){return Object(r.e)()&&e?e.headers["user-agent"]:"undefined"!=typeof navigator?navigator.userAgent:""}function c(e){var t=s(e),n=/quickapp/i.test(t),r=/(hap|OPPO\/Hybrid)\/\d/i.test(t)&&!(t.indexOf("quickapp")>-1);return n||r}function u(e){if(Object(r.e)()){var t=s(e);return/quickapp/i.test(t)}return c(e)&&window.cmpBridge&&window.cmpBridge.isNewQuickapp()}function l(e){return"undefined"!=typeof document&&-1!==document.cookie.indexOf("alipay_hk")}function f(){return!!new RegExp("^.*("+["\\+https:\\/\\/developers.google.com\\/\\+\\/web\\/snippet\\/","ad\\smonitoring","adsbot","apex","applebot","archive.org_bot","baiduspider","bingbot","chromeheadless","cloudflare","cloudinary","crawler","curl","discordbot","duckduckbot","embedly","exabot","facebookexternalhit","facebot","flipboard","google","googlebot","gsa-crawler","gurujibot","guzzlehttp","heritrix","ia_archiver","insights","linkedinbot","ltx71","mediapartners","msnbot","odklbot","phantom\\.js","phantomjs","pingdom","pinterest","python","rtlnieuws","skypeuripreview","slackbot","slurp","spbot","telegrambot","test\\scertificate","testing","tiabot","tumblr ","twitterbot","vkshare","web\\sscraper","wget","yandexbot","whatsapp","orangebot","smtbot","qwantify","mj12bot","ahrefsbot","seznambot","panscient.com","duckduckgo-favicons-bot","uptimerobot","semrushbot"].join("|")+").*$").exec(navigator.userAgent.toLowerCase())}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.initial="initial",e.doing="doing",e.done="done",e.failed="failed"}(r||(r={}))},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=n(42),i=n(73),a=Object.prototype.toString;function s(e){return"[object Array]"===a.call(e)}function c(e){return null!==e&&"object"===r(e)}function u(e){return"[object Function]"===a.call(e)}function l(e,t){if(null!=e)if("object"!==r(e)&&(e=[e]),s(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:u,isStream:function(e){return c(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===r(n)?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)l(arguments[o],n);return t},extend:function(e,t,n){return l(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"c",(function(){return u})),n.d(t,"e",(function(){return l})),n.d(t,"d",(function(){return f})),n.d(t,"b",(function(){return p})),n.d(t,"f",(function(){return d}));var r=n(6);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e){return"[object Array]"===Object.prototype.toString.call(e)}var s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:encodeURIComponent,r=[];for(var o in e)if(Object.hasOwnProperty.call(e,o)){var i=e[o];if(t&&null==i)continue;"function"==typeof i?i=i():null===i&&(i=""),r.push("".concat(o,"=").concat(n(void 0===i?"":String(i))))}return r.join("&")};function c(e,t){if(!e)return"";try{return t(e)}catch(t){return e}}function u(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:decodeURIComponent;if("string"!=typeof e)return{};var r={};return e.split("&").forEach((function(e){var i=o(e.split("="),2),s=i[0],u=i[1];if(s){var l=c(u,n),f=r[s];f&&!t?a(f)?f.push(l):r[s]=[f,l]:r[s]=l}})),r}function l(e,t){var n=!1;return new Promise((function(o,i){t.then((function(e){n=!0,o(e)})).catch((function(e){n=!0,i(e)})),setTimeout((function(){n||i(new r.d(e))}),e)}))}function f(e){var t,n=new Promise((function(n,r){e.then(n,r),t=r}));return n.abort=function(){var e;null===(e=t)||void 0===e||e(r.a.MANUAL_ABORT_ERROR())},n}function p(e){return"function"==typeof e.abort}function d(e,t){return e>=200&&e<300||304===e||"file:"===t&&0===e}},function(e,t,n){"use strict";var r,o;n.d(t,"a",(function(){return X})),function(e){e.pending="pending",e.failed="failed",e.success="success"}(r||(r={})),function(e){e.useOldWay="useOldWay",e.waitingForQconfig="waitingForQconfig",e.useNewWay="useNewWay",e.useNewWayWithCache="useNewWayWithCache",e.useOldWayWithCache="useOldWayWithCache"}(o||(o={}));var i,a=n(0),s=n(1),c=n(9),u=n(5),l=null,f=function(){l&&l.show()},p=function(){l&&l.hide()},d=n(32),h=n(22),m=n(3),g=n(15),y=n(2),v=n.n(y),_=n(21);!function(e){e.loadError="loadError",e.networkError="networkError",e.noSearchResult="noSearchResult"}(i||(i={}));var b={};var w,O=(w=function(e,t){return(w=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}w(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),E=function(e){function t(t){var n=e.call(this,t)||this;return n.getImgSrc=function(){var e=n.props.errorType,t="https://webresource.c-ctrip.com/ares2/activity/ottd-pic-service/1.0.27/default/";return n.isTrip?n.getTripImgSrc(e,t+"trip/"):n.getCtripImgSrc(e,t+"ctrip/")},n.show=function(){n.setState({visible:!0})},n.hide=function(){n.setState({visible:!1})},t.keys&&(b[t.keys]=n),n.isTrip=Object(s.f)().channel===a.c.trip,n.state={visible:!1},n}return O(t,e),t.prototype.componentWillReceiveProps=function(e){var t=e.visible;e.visible!==this.props.visible&&this.setState({visible:t})},t.prototype.getCtripImgSrc=function(e,t){var n="";switch(e){case i.noSearchResult:n="https://pic.c-ctrip.com/platform/h5/component/empty-state/empty-result.png";break;case i.loadError:n=t+"loaderror.png";break;case i.networkError:n=t+"networkerror.png";break;default:n=t+"loaderror.png"}return n},t.prototype.getTripImgSrc=function(e,t){var n="";switch(e){case i.noSearchResult:n=t+"searchNoResults.png";break;case i.loadError:n=t+"failtoload.png";break;case i.networkError:n=t+"nonetwork.png";break;default:n=t+"failtoload.png"}return n},t.prototype.tipsTxt=function(e){var t=this.props.tipsTxt;if(t)return t;var n=this.IBUShark("key.v.page.error.loaderror","加载失败，请稍候再试");switch(e){case i.loadError:n=this.IBUShark("key.v.page.error.loaderror","加载失败，请稍候再试");break;case i.networkError:n=this.IBUShark("key.v.page.error.networkisawful","网络不给力，请检查网络设置后再试")}return n},t}(_.a),S=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return S(t,e),t.prototype.render=function(){var e=this.props,t=e.fclass,n=e.errorType,r=e.onButtonClick,o=e.buttonTxt;return this.state.visible&&v.a.createElement("div",{className:"error_wrap "+t},v.a.createElement("div",{className:"container"},v.a.createElement("img",{className:"error_img",src:this.getImgSrc()}),v.a.createElement("div",{className:"error_text_box"},this.tipsTxt(n||i.loadError)),r&&v.a.createElement("div",{className:"refresh_btn",onClick:function(){r()}},o||this.IBUShark("key.v.page.error.retry","重试"))))},t}(E),j=null;var T,P=function(e){setTimeout((function(){j()}),0),e.child=C,e.props||(e.props=m.b.get("errorpage").assistComponent.props);var t=e.props.name||"errorpage";e.props.visible?(m.b.get(t).assistComponent.props.visible=!1,m.b.get(t).assistComponent.props.hideInstant=!0,m.b.change(t),setTimeout((function(){e.props.visible=!0,m.b.change(t,e)}),0)):(e.props.visible=!0,m.b.change(t,e))},k=function(e,t){m.b.get(t||"errorpage").assistComponent.props.visible=!1,m.b.get(t||"errorpage").assistComponent.props.hideInstant=!!e,m.b.change(t||"errorpage"),Object(g.a)()},A=function(){function e(e,t,n){this.fn=e,this.id=t,this.status=n}return e.prototype.setSuccess=function(){this.status=r.success},e.prototype.setFailed=function(){this.status=r.failed},e.prototype.setPending=function(){this.status=r.pending},e}(),x=function(){function e(){this.isShowErrorPage=!1,this.stack=[]}return e.prototype.clear=function(){this.stack=[]},e.prototype.deleteByIndex=function(e){this.stack.splice(e,1)},e.prototype.deleteById=function(e){var t=this.stack.findIndex((function(t){return t.id===e}));this.stack[t]instanceof A&&(this.stack[t].setSuccess(),this.deleteByIndex(t))},e.prototype.findItemById=function(e){var t=this.stack.findIndex((function(t){return t.id===e}));return this.stack[t]||new A((function(){}),"any",r.failed)},e.prototype.deleteAll=function(){this.stack=[]},e.prototype.append=function(e){e instanceof A&&this.stack.push(e)},e.prototype.dispatch=function(){var e=this;this.stack.forEach((function(t,n){t.status===r.failed?t.fn():t.status===r.success&&e.deleteByIndex(n)}))},e.prototype.setIsShowErrorPage=function(e){this.isShowErrorPage=e},e.prototype.showErrorPage=function(e){this.isShowErrorPage||(this.setIsShowErrorPage(!0),e())},e}(),D=function(){return(D=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},R={beginTime:0,firstByteTime:0,allByteDownTime:0,afterJSonTime:0,afterSendLogTime:0,statusis0:0,statusis1:0,statusis2:0,statusis3:0},N={},I=0,M=new x,B=Object(s.f)().channel===a.c.ctrip,L=function(){function e(){this.dic={}}return e.next=function(t,n,r,o){return this.instance||(this.instance=new e),e.detectLogRequest(t,n,r,o)},e.isUseNewControlErrorPage=function(e){return B&&e&&e.isCtripOpen},e.detectLogRequest=function(t,n,r,o){return null!==n&&e.isLogRequest(n)?this.instance.next(t,n,r,o):e.handleRequestCache(t,n,r,o)},e.isLogRequest=function(e){return-1!==e.actionUrl.indexOf("16879")||-1!==e.actionUrl.indexOf("17073")},e.handleRequestCache=function(t,n,o,i){var a=this,s=I++,c=function(){return a.instance.next(D(D({},t),{randomId:s}),n,o,i)},u=e.cacheRequest[s]=function(){c()};if(e.isUseNewControlErrorPage(o)){var l=new A(u,s,r.pending);M.append(l)}c()},e.prototype.next=function(e,t,n,r){var o=this,i=!1;null!=t?(t.loading&&(i=!0),this.nextPair(e,t,r,n)):(n.loading&&(i=!0),n.count=0,n.resonse=[],n.list.map((function(t,i){o.nextPair(e,D({pageId:n.pageId,isNotOpenErrorPage:!!n.isNotOpenErrorPage,count:i},t),r,n)}))),i&&(T&&clearTimeout(T),T=setTimeout((function(){f()}),100))},e.prototype.nextPair=function(e,t,n,r){var o=t.actionUrl;t.apiUrl=o,o=o.indexOf("http://")>-1||o.indexOf("https://")>-1?o:Object(s.c)()+o,Object.assign(t,{actionUrl:o}),this.dic[t.actionUrl]&&(clearTimeout(this.dic[t.actionUrl][1]),this.dic[t.actionUrl][0].abort());var i=this.send(e,t,n,r);if(!0!==n){var a=Object(c.d)(t);this.dic[t.actionUrl]=[i,this.setOverTime(t,e.randomId),a]}},e.prototype.setOverTime=function(e,t){var n=this;return setTimeout((function(){e.isOpen&&n.handleErrorPage(t),n.dic[e.actionUrl][0].abort()}),15e3)},e.prototype.onFinish=function(e,t){var n=t?t.loading:e.loading;if(n&&p(),n&&(p(),clearTimeout(T)),this.dic[e.actionUrl]){for(var r in this.dic)if(this.dic.hasOwnProperty(r)){var o=this.dic[r];clearTimeout(o[1])}delete this.dic[e.actionUrl]}},e.prototype.onSuccess=function(t,n,r,o,i){e.isUseNewControlErrorPage(r)&&M.deleteById(i);try{if(!0!==o&&this.dic[n.actionUrl]){Object(c.e)({token:this.dic[n.actionUrl][2],response:t,type:u.a.info}),n.actionUrl.indexOf("Shelf")>-1&&(R.afterSendLogTime=performance.now()),window.timeCache=R;var a=R.beginTime,l=(R.firstByteTime,R.allByteDownTime),f=R.afterJSonTime,p=R.afterSendLogTime,m=R.statusis2;R.statusis3;document.write("\n<pre style='font-size:20px'>\n调用接口: 12530/json/getProductShelf \n\n第一个字节接收的时间:"+(m-a)+"ms \n\n所有字节接收的时间:"+(l-a)+"ms \n\n反序列化完成时间:"+(f-a)+"ms \n\n日志发送时间:"+(p-a)+"ms \n\nrootMessageid:"+t.ResponseStatus.Extension.filter((function(e){return"RootMessageId"===e.Id}))[0].Value+" \n\n                </pre>"),console.log("所有字节接收的时间:",l-a+"ms"),console.log("反序列化完成时间:",f-a+"ms"),console.log("日志发送时间:",p-a+"ms"),console.log("rootMessageid:",""+t.ResponseStatus.Extension.filter((function(e){return"RootMessageId"===e.Id}))[0].Value)}if(null==r)if(n.aliaName&&!Object(s.d)().isOpenBff){var g=N[n.aliaName],y={ResponseStatus:t.ResponseStatus,data:g([D({},t)])};n.success&&n.success(y)}else n.success&&n.success(t);else if(r.count++,r.resonse[n.count]=t,r.count===r.list.length)if(r.aliaName&&!Object(s.d)().isOpenBff){g=N[r.aliaName],y={ResponseStatus:t.ResponseStatus,data:g(D({},r.resonse))};r.success&&r.success(y)}else r.success&&r.success(r.resonse)}catch(e){console.log(e),Object(c.b)({title:"客户端脚本报错",type:u.a.error,tags:{message:e||"",demeter:"jsError",errorType:"网络繁忙"}}),d.a.show(Object(h.a)("key.v.page.toast.networkerr","网络繁忙"))}this.onFinish(n,r)},e.prototype.handleErrorPage=function(t,n){B&&!n||P({props:{errorType:"networkError",buttonShowFlag:!0,fstyle:{container:{flex:1,backgroundColor:"#FFF",top:0,right:0,left:0,zIndex:100,position:"absolute",height:"100%"}},onButtonClick:function(){B&&n?(M.dispatch(),M.setIsShowErrorPage(!1)):e.cacheRequest[t](),k()}}})},e.prototype.onFail=function(e,t,n,r,o,i){if(null==r)n.fail&&n.fail(e,t);else if(r.count++,r.resonse[n.count]=[e,t],r.count===r.list.length){if("0"==r.resonse[0][0])return;r.success&&r.success(r.resonse)}!0!==o&&"0"!=e&&this.dic[n.actionUrl]&&Object(c.e)({token:this.dic[n.actionUrl][2],response:t,type:u.a.error,errorCode:e}),this.onFinish(n,r)},e.prototype.send=function(t,n,r,o){var i=this,a=new XMLHttpRequest,s=t.isOpenBff,c={};return a.open(n.method||"POST",n.actionUrl,!0),a.setRequestHeader("Content-Type","application/json;charset=UTF-8"),a.setRequestHeader("Accept","application/json"),a.withCredentials=!0,c=e.isLogRequest(n)?{body:n.request}:n.request,"GET"===n.method?a.send():a.send(JSON.stringify(D({head:t},c))),n.actionUrl.indexOf("Shelf")>-1&&(R.beginTime=performance.now()),a.onerror=function(){e.isUseNewControlErrorPage(o)?(M.findItemById(t.randomId).setFailed(),M.showErrorPage(i.handleErrorPage.bind(i,t.randomId,o.isCtripOpen))):!n.isNotOpenErrorPage&&!e.isLogRequest(n)&&i.handleErrorPage(t.randomId)},a.onreadystatechange=function(){if(0===a.readyState&&n.actionUrl.indexOf("Shelf")>-1&&(R.statusis0=performance.now()),1===a.readyState&&n.actionUrl.indexOf("Shelf")>-1&&(R.statusis1=performance.now()),2===a.readyState&&n.actionUrl.indexOf("Shelf")>-1&&(R.statusis2=performance.now()),3===a.readyState&&n.actionUrl.indexOf("Shelf")>-1&&(R.statusis3=performance.now()),4===a.readyState)if(n.actionUrl.indexOf("Shelf")>-1&&(R.firstByteTime=performance.now()),200===a.status){n.actionUrl.indexOf("Shelf")>-1&&(R.allByteDownTime=performance.now());try{var e=JSON.parse(a.responseText);n.actionUrl.indexOf("Shelf")>-1&&(R.afterJSonTime=performance.now());var c=e;s&&c.extensions&&c.extensions.SoaResponseStatus&&(e={ResponseStatus:c.extensions.SoaResponseStatus.ResponseStatus,data:c.data.TTDCombineBff.Data}),e.ResponseStatus&&"Error"===e.ResponseStatus.Ack?i.onFail(e.ResponseStatus.Errors[0].ErrorCode,e,n,o,r,t.randomId):i.onSuccess(e,n,o,r,t.randomId)}catch(e){}}else i.onFail(a.status.toString(),null,n,o,r,t.randomId)},a},e.cacheRequest={},e}(),U=function(){return(U=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},q=function(e,t){var n={};if(e){n={apiName:[""+e.actionUrl],aliaName:e.aliaName}}else{var r=[];t.list.map((function(e,t){r.push(e.actionUrl)})),n={apiName:r,aliaName:t.aliaName}}return n=U({query:"{     TTDCombineBff(id: 1) {      Data  ,ResponseStatus } }"},n),{bffParams:n}},F=function(e){var t={},n=Object(s.a)();n=n+(n.indexOf("?")>-1?"&":"?")+"operationName="+e.aliaName,e.list.map((function(e,n){t=U({},e.request)}));var r=U(U({},e),{list:[],pageId:e.pageId,isNotOpenErrorPage:!!e.isNotOpenErrorPage});return{request:t,requestOtherList:r}},K=function(e){var t,n=Object(s.a)();n=n+(n.indexOf("?")>-1?"&":"?")+"operationName="+e.bffParams.aliaName;var r=U(U({params:U({head:Object(s.d)()},e.request)},e.bffParams),{header:Object(s.d)()}),o=e.requestOtherList||null;return o||(o=e),t=U(U({},o),{request:r}),U(U({},t),{actionUrl:n})},W=function(e,t){return!!(Object(s.d)().isOpenBff&&e&&e.aliaName||t&&t.aliaName)},H=function(e,t){if(e&&e.aliaName){var n=q(e,t);e=K(U(U({},e),n))}else if(t&&t.aliaName){n=q(null,t);var r=F(t);e=K(U(U({},r),n)),t=null}return{request:e,requestList:t}},V=n(40),G=function(){return(G=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},J=[],z={title:"bff开关信息",type:u.a.error,tags:{}};var Q=function(e,t,n,r){var o=function(e){var t;e.extension||(e.extension=[]);var n=r.crawlerKey,o=r.fingerPrintKey;return(t=e.extension).push.apply(t,[{name:"crawlerKey",value:n},{name:"fingerprintKeys",value:o}]),JSON.parse(JSON.stringify(e.extension))},i=function(e){var t;e.extension||(e.extension=[]);var n=r.crawlerKey;r.fingerPrintKey;return(t=e.extension).push.apply(t,[{name:"crnSecrectKey",value:n},{name:"platformType",value:Object(s.d)().OS},{name:"timestamp",value:Date.now().toString()}]),JSON.parse(JSON.stringify(e.extension))},c=Object(s.d)().platform;if(n>-1&&t){var u=JSON.parse(JSON.stringify(t.list[n].request.head||{})),l=c===a.f.RN?i(u):o(u);t.list[n].request.head=G(G({},u),{extension:l})}else{u=e.request&&e.request.head||{};var f=c===a.f.RN?i(u):o(u);e.request.head.extension=f}return[e,t]},$=function(e,t,n,r,o){var i=o.isNeedCrawlerKey,a=o.index;return!1===i?L.next(e,t,n,r):Promise.all(function(e){var t=function(e){return new Promise((function(t){var n=new V.a({});n.antiCrawlerhandler().then((function(r){t([r,n.getCrawlerKey(),n.getFingerPrintKey(),e])}))}))};if(-1===e){new V.a({});return[t(-1)]}return e.map((function(n){return t(e[n])}))}(a)).then((function(o){for(var i,a,s=0;s<o.length;s++){var c=o[s],u=c[0],l=c[1],f=c[2],p=c[3];if(!1===u)return L.next(e,t,n,r);var d=Q(t=i||t,n=a||n,p,{crawlerKey:l,fingerPrintKey:f});i=d[0],a=d[1]}return L.next(e,i,a,r)}))},Y=function(e,t,n,r,i,a,c){var u=function(){J.length>0&&(J.forEach((function(e){var t=e.params,n=t.request,r=t.requestList,o=t.isLog;if(W(e.request,e.requestList)){var i=H(n,r);e.func(Object(s.d)(),i.request,i.requestList,o)}else e.func(Object(s.d)(),n,r,o)})),J=[])};switch(e){case o.useNewWayWithCache:var l=H(r,i);t(n,l.request,l.requestList,a),u();break;case o.useOldWayWithCache:t(n,r,i,a),u();break;case o.useOldWay:$(n,r,i,a,c);break;case o.useNewWay:var f=H(r,i);t(n,f.request,f.requestList,a);break;case o.waitingForQconfig:}},X=function(e,t,n){var r;if(!Object(s.e)()){var i=(r=function(e,t){var n=V.a.getWhiteList(),r=Object(s.d)(),o=r.platform,i=r.channel,c=r.app_version,u=r.OS,l=!1,f=-1;if(e&&e.actionUrl&&e.actionUrl.indexOf("16879")>-1||!n||0===n.length||o===a.f.Online||i===a.c.trip||o===a.f.RN&&("android"!==u||!Object(V.b)(c,"8.28.0")))return{isNeedCrawlerKey:l,index:f};var p=function(e){for(var t=e.actionUrl.replace("/json",""),r=!1,a=0,s=n.length;a<s;a++){var c=n[a];if(o===c.platform&&i===c.channel&&t.indexOf(c.apiName)>-1){r=!0;break}}return r};if(null===e)for(var d=t.list,h=0,m=d.length;h<m;h++){var g;g=p(d[h]),l=l||g,!0===g&&(-1!==f?f.push(h):f=[h])}else l=p(e);return{isNeedCrawlerKey:l,index:f}}(e,t)).isNeedCrawlerKey,u=r.index,l=Object(s.d)();l.pageId=e&&e.pageId||t&&t.pageId||c.a.pageId,l.netState=Object(s.b)();var f=function(e,t,n,r){L.next(e,t,n,r)};return new Promise((function(r,i){!function(e,t){return!(e&&(-1!==e.actionUrl.indexOf("16879")||-1!==e.actionUrl.indexOf("17073")))&&(e&&e.aliaName||t&&t.aliaName)}(e,t)?r(o.useOldWay):void 0===Object(s.d)().isOpenBff?function(e,t){return e?!0===e.isFirstScreen:!!t&&t.list.findIndex((function(e){return!0===e.isFirstScreen}))>-1}(e,t)?function(e,t){L.next(e,{request:{KeyList:["ottd_getway_config"]},actionUrl:"12446/QConfig",success:function(e){var n=e&&e.Data&&e.Data.AppSettingList;if(n&&n.length>0){var r=n[0].Value||"";r=JSON.parse(r)||{},t(!!r&&"on"===r.bffSwitch)}else t(!1)},fail:function(){Object(c.b)(G(G({},z),{title:"bff开关获取失败"})),t(!1)}},null,!1)}(l,(function(e){Object(s.d)().isOpenBff=e,r(!0===e?o.useNewWayWithCache:o.useOldWayWithCache)})):(J.push({func:f,params:{Header:l,request:e,requestList:t,isLog:n}}),r(o.waitingForQconfig)):!0===Object(s.d)().isOpenBff?r(o.useNewWay):r(o.useOldWay)})).then((function(r){Y(r,f,l,e,t,n,{isNeedCrawlerKey:i,index:u})})).catch((function(r){var a=G(G({},z),{title:"bff开关逻辑报错",tags:{stack:r&&r.stack,message:r}});console.error(a),Object(c.b)(a),Y(o.useOldWayWithCache,f,l,e,t,n,{isNeedCrawlerKey:i,index:u})}))}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return a}));var r=null,o=null,i=function(){if(r)return r()},a=function(){if(o)return o()}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="toast"},function(e,t,n){"use strict";n.d(t,"b",(function(){return P})),n.d(t,"c",(function(){return k})),n.d(t,"a",(function(){return A}));function r(e,t){return e.indexOf(t)>-1}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=function(){if("undefined"==typeof window)return!1;var e=window.location.pathname;return/^\/m/.test(e)||function(){if("undefined"==typeof navigator)return!1;var e=navigator.userAgent.toLowerCase();return/(ctrip|android|iphone|mobile|webos)/.test(e)&&!/(ipad|pad)/.test(e)}()};function a(e){var t=void 0===e?{}:e,n=t.isOnline,o=void 0===n?!i():n,a=t.isDomestic,s=void 0===a?"ctrip"==("undefined"==typeof window?"trip":r(window.location.hostname||window.location.host,"ctrip")?"ctrip":"trip"):a;return o?s?"//webresource.c-ctrip.com/code/ubt/_bfa.min.js":"//webresource.tripcdn.com/ares2/sysdev/ubt/*/default/_bfa.min.js":s?"//webresource.c-ctrip.com/code/ubt/_mubt.min.js":"//webresource.tripcdn.com/ares2/sysdev/ubt/*/default/_mubt.min.js"}function s(){for(var e=document.getElementsByTagName("script"),t=0;t<e.length;t++){var n=e[t],r=n.src;if(r&&r.indexOf("/code/ubt")>-1)return n}return null}function c(){return void 0!==window.$_bf||window.__bfi&&"function"==typeof window.__bfi.push&&window.__bfi.push!==Array.prototype.push||!!window.__BF_LOADING_FLAG__}function u(e){if(c())return Promise.resolve();var t,n=s()||function(e){void 0===e&&(e=a());var t=new Date,n="?v="+t.getFullYear()+t.getMonth()+"_"+t.getDate(),r=document.createElement("script");r.type="text/javascript",r.charset="utf-8",r.async=!0,r.src=e+n;var o=document.getElementsByTagName("script")[0];return o&&o.parentElement?o.parentElement.insertBefore(r,o):document.body.appendChild(r),r}(e);return t=n,new Promise((function(e,n){t.addEventListener("error",(function(e){console.warn("load ubt js fail",e),n(e)})),t.addEventListener("load",(function(){e()})),t.addEventListener("readystatechange",(function(){"loaded"!==t.readyState&&"complete"!==t.readyState||e()}))}))}var l=function(){"object"===("undefined"==typeof window?"undefined":o(window))&&window.__BF_CUSTOM_LOAD_FLAG__||(c()||s()?l=function(){}:function(e){if("undefined"==typeof window)return Promise.resolve();if(window.__BF_LOAD_PROMISE__)return window.__BF_LOAD_PROMISE__;var t=u(e);return window.__BF_LOAD_PROMISE__=t,t}().then((function(){l=function(){}})))};function f(e,t){var n=(l(),window.__bfi||(window.__bfi=[]),window.__bfi);t.unshift(e),n.push(t)}function p(e){return new Promise((function(t){var n=e;n.callback=function(n){1!==n&&console.warn("[ubt] track metric not success, please check status("+n+").",e),t(n)},f("_trackMetric",[n])}))}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e){var t={};return Object.keys(e).forEach((function(n){if("string"==typeof n&&"number"==typeof e[n]){var r=Math.max(e[n],0);t[n]=r}})),t}function _(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=g({url:e},v(t));"string"==typeof n.region&&(r.region=n.region);var o={name:"ibu_ajax_perf",value:t.duration,sample:100,tag:r};return p(o)}function b(e,t){return t>0&&e>t?e-t:0}function w(e,t){if(e&&0!==Object.keys(e).length)return p({name:"JS.Lizard.AjaxReady",tag:g(g({},t),e),value:t.duration||0})}function O(e){var t=e.originError,n={message:e.message,stack:e.stack,line:null==t?void 0:t.lineNumber,column:null==t?void 0:t.columnNumber,file:null==t?void 0:t.fileName};f("_trackError",[n])}var E=n(6),S=n(19),C=n(30),j=n(31);function T(e){for(var t=function(e){return"function"==typeof performance.getEntriesByName?performance.getEntriesByName(e):"function"==typeof performance.getEntriesByType?performance.getEntriesByType("resource"):[]}(e),n=null,r=-1,o=t.length-1;o>=0;o--){var i=t[o];"xmlhttprequest"!==i.initiatorType&&"fetch"!==i.initiatorType||i.name===e&&i.responseEnd>r&&(r=i.responseEnd,n=i)}return n}function P(e,t,n){try{O(Object(E.e)(Object(j.a)(e),t))}catch(e){console.warn("[track ajax] fail:",e)}}function k(e,t,n){var r=t.url,o=t.responseHeaders;try{var i=function(e){var t="",n=window.location,r=n.protocol,o=n.host;if(!e)return"";t=/^http/.test(e)?e:/^\/\//.test(e)?r+e:/^\//.test(e)?r+"//"+o+e:r+"//"+e;return t}(r),a=T(i);if(!a)throw new Error("[track ajax] can't find ResourceTiming, url \"".concat(i,'" may not correct'));var s=Object(C.a)(e);return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r={DNSTime:b(e.domainLookupEnd,e.domainLookupStart),TCPTime:b(e.connectEnd,e.connectStart),SSLTime:b(e.connectEnd,e.secureConnectionStart),requestTime:b(e.responseStart,e.requestStart||e.fetchStart||e.startTime),responseTime:b(e.responseEnd,e.responseStart),duration:e.duration||b(e.responseEnd,e.fetchStart)};return Promise.all([_(e.name,r,t),n?w(n,{url:e.name,duration:r.duration}):Promise.reject()]).then((function(e){return d(e,1)[0]}))}(a,{region:o&&o["x-gate-region"]||n&&n.getResponseHeader("x-gate-region")||""},s)}catch(e){return console.warn("[track ajax] fail:",e),Promise.resolve(-1)}}function A(e,t){return new Promise((function(n,r){var o=function(){n(k({},{url:t},e))};if(e.readyState===S.c)return o();var i=function(e){P(e,{url:t}),r(e)};e.addEventListener("error",i),e.addEventListener("timeout",i),e.addEventListener("abort",i),e.addEventListener("readystatechange",(function(){e.readyState===S.c&&o()}))}))}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return a}));var r=new(function(){function e(){this._system=function(){},this._getNetState=function(){},this._getHeader=function(){}}return e.prototype.system=function(){return this._system},e.prototype.getNetState=function(){return this._getNetState()},e.prototype.getHeader=function(){return this._getHeader()},e.prototype.init=function(e,t,n){Object.assign(this._system,e),this._getNetState=t,this._getHeader=n},e}()),o=(r.init.bind(r),r.system.bind(r)),i=r.getNetState.bind(r),a=r.getHeader.bind(r)},function(e,t,n){"use strict";n.d(t,"c",(function(){return r})),n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return i}));var r=4,o="component-sub_env",i="subEnv"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return request}));var _shared_constant__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56),_shared_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(13),_shared_cache__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(55),_track__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(17),_helper__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(57),_shared_errors__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(6),_constant__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(19),_shared_default_error_handler__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(27),_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(31);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var WIN_KEY="__TRIP_COMPONENT_REQUEST_CACHE__",cacheManager=window[WIN_KEY]=window[WIN_KEY]||new _shared_cache__WEBPACK_IMPORTED_MODULE_2__.a;function noop(){}function getSubEnv(){try{if("object"===("undefined"==typeof localStorage?"undefined":_typeof(localStorage))&&window.localStorage&&"function"==typeof localStorage.getItem)return window.localStorage.getItem(_constant__WEBPACK_IMPORTED_MODULE_6__.a)}catch(e){return null}}function isDevOrFat(){var e=window.location.host;return e.indexOf(".qa.nt")>-1||e.indexOf("localhost")>-1}function getResponseDataType(e){if(e){var t=e.split(";",1)[0];return _shared_constant__WEBPACK_IMPORTED_MODULE_0__.a[t]}}function trim(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}function getResponseHeaders(e){var t=trim(e.getAllResponseHeaders()).split(/[\r\n]+/),n={};return t.forEach((function(e){var t=e.split(": "),r=t.shift(),o=t.join(": ");r&&(n[r]=o)})),n}var decodeResponse=function decodeResponse(xhr,dataType){var response;if("arraybuffer"===xhr.responseType||"blob"===xhr.responseType)response=xhr.response;else{response=xhr.responseText;var responseDataType=dataType||getResponseDataType(xhr.getResponseHeader("content-type"));"script"===responseDataType?eval(response):"json"===responseDataType&&(response=""===trim(response)?null:JSON.parse(response))}return response};function _ajax(e){var t=e.url,n=e.method,r=void 0===n?"GET":n,o=e.params,i=e.data,a=void 0===i?null:i,s=e.contentType,c=void 0===s?null:s,u=e.dataType,l=void 0===u?null:u,f=e.__success,p=void 0===f?noop:f,d=e.__error,h=void 0===d?noop:d,m=e.timeout,g=void 0===m?0:m,y=e.headers,v=void 0===y?{}:y;r=r.toUpperCase();var _=new XMLHttpRequest,b=/^([\w-]+:)\/\//.test(t)?RegExp.$1:window.location.protocol,w=!1,O=function(n,r){if(!w){if(n){var o=Object(_shared_errors__WEBPACK_IMPORTED_MODULE_5__.e)(Object(_utils__WEBPACK_IMPORTED_MODULE_8__.a)(n),e,{status:_.status,statusText:_.statusText,data:_.responseText||_.response,headers:getResponseHeaders(_)});h(o,_)}else{p({url:t,response:r,xhr:_},_)}w=!0}},E=function(){if(Object(_shared_utils__WEBPACK_IMPORTED_MODULE_1__.f)(_.status,b))try{var e=decodeResponse(_,l);O(null,e)}catch(e){O(e)}else{var n=new Error('url "'.concat(t,'" response status "').concat(_.status,'" is not correct'));O(n)}},S=function(e){O(e)},C=getSubEnv();C&&isDevOrFat()&&((o=o||{})[_constant__WEBPACK_IMPORTED_MODULE_6__.b]=C),o&&(t+=(t.indexOf("?")>-1?"&":"?")+Object(_shared_utils__WEBPACK_IMPORTED_MODULE_1__.a)(o)),_.onreadystatechange=function(){_.readyState===_constant__WEBPACK_IMPORTED_MODULE_6__.c&&(_.onreadystatechange=noop,setTimeout((function(){w||E()}),0))},_.onload=E,_.onerror=function(e){return S(e)},_.ontimeout=function(){return S(new _shared_errors__WEBPACK_IMPORTED_MODULE_5__.d(g))},_.onabort=function(){_.__abortByUser?S(_shared_errors__WEBPACK_IMPORTED_MODULE_5__.a.MANUAL_ABORT_ERROR()):S(new _shared_errors__WEBPACK_IMPORTED_MODULE_5__.a)},_.open(r,t,!0,null,null);for(var j=0,T=Object.keys(v);j<T.length;j++){var P=T[j],k=v[P];_.setRequestHeader(P,k)}return"POST"!==r||v["Content-Type"]||_.setRequestHeader("Content-Type",c||"application/json"),g>0&&(_.timeout=g),_.send(a&&"GET"!==r?JSON.stringify(a):null),_}var _request=function(e){if(e.cache){var t=cacheManager.get(e);if(t&&Object(_shared_utils__WEBPACK_IMPORTED_MODULE_1__.b)(t))return t}var n,r=new Promise((function(t,r){var o=e;o.__success=t,o.__error=r,n=_ajax(o)})).then((function(t){var n=t.response,r=t.url,o=t.xhr;if(Object(_track__WEBPACK_IMPORTED_MODULE_3__.c)(n,{url:r},o),"function"==typeof e.transformResponse)try{return e.transformResponse(n,{headers:getResponseHeaders(o)})}catch(e){return n}return n})).catch((function(t){var r=Object(_shared_errors__WEBPACK_IMPORTED_MODULE_5__.e)(t,e);if(e.trackError&&Object(_track__WEBPACK_IMPORTED_MODULE_3__.b)(t,e,n),!_shared_default_error_handler__WEBPACK_IMPORTED_MODULE_7__.a)throw r;Object(_shared_default_error_handler__WEBPACK_IMPORTED_MODULE_7__.a)(r)}));return r.abort=function(){n&&(n.__abortByUser=!0,n.abort())},Object.defineProperty(r,"_xhr",{get:function(){return n}}),e.cache&&cacheManager.add(e,r),r},request=Object(_helper__WEBPACK_IMPORTED_MODULE_4__.a)(_request)},function(e,t,n){"use strict";var r,o=n(2),i=n.n(o),a=(n(7),n(1)),s=n(0);!function(e){e.right="right",e.left="left",e.up="up",e.down="down"}(r||(r={}));var c,u,l=null,f=function(e,t,n){void 0===e&&(e="resize"),n?n.addEventListener(e,t):l?l.register(e,t):"Online"!=Object(a.f)().platform&&"H5"!=Object(a.f)().platform&&"Hybrid"!=Object(a.f)().platform||window.addEventListener(e,t)},p=n(22),d=(c=function(e,t){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});!function(e){e.all="all",e.state="state",e.props="props"}(u||(u={}));var h=function(e){function t(t){var n=e.call(this,t)||this;return n.IBUShark=function(e,t,n,r){return Object(p.a)(e,t,n,r)},n.renderCount=2,n.isCtrip=Object(a.f)().channel===s.c.ctrip,n.isTrip=Object(a.f)().channel===s.c.trip,n.onWindowResize&&(n.onWindowResize=n.onWindowResize.bind(n),f("resize",(function(e){Object(a.d)().width=window.screen.width,n.onWindowResize(e)}))),n}return d(t,e),t.prototype.shouldComponentUpdate=function(e,t,n){var r=!0;return(r=this.compareType!=u.state&&this.compare(e,this.props,this.constructor.name))||(r=this.compare(t,this.state,this.constructor.name)),r||(r=this.compare(n,this.context,this.constructor.name)),r&&this.computerRender(),console.log(r,this.constructor.name),r},t.prototype.computerRender=function(){this.renderCount++},t.prototype.compare=function(e,t,n){var r=!0;if(null==e&&null==t)r=!1;else if(null==e||null==t||Object.keys(e).length!=Object.keys(t).length)r=!0;else try{r=!(JSON.stringify(e)==JSON.stringify(t))}catch(e){r=!0}return r},t}(i.a.Component);t.a=h},function(e,t,n){"use strict";var r=n(1),o=n(0),i=null,a=function(e,t,n,r){return void 0===e&&(e=""),(e=e.split("")).splice(t,n,r),e=e.join("")},s=function(e,t){void 0===e&&(e=""),void 0===t&&(t=[]),t=t||[];for(var n=0;n<t.length;n++){var r=e.indexOf("$("+n+")");if(r>-1)e=a(e,r,3+n.toString().length,t[n]);else{var o=e.indexOf("%"+(n+1)+"$s");o>-1&&(e=a(e,o,3+(n+1).toString().length,t[n]))}}return e},c={},u=n(8);t.a=function(e,t,n,a,l){if(Object(r.f)(l).channel===o.c.trip&&l)return l.getShark?l.getShark(e,t,n,a):l.shark.get(e);if(c&&c[e])return c[e];var f=Object(r.f)(l),p=f.channel,d=f.platform;if(p===o.c.ctrip)return t;if(i)return i(e,n,a)||t||e;var h=void 0;if(d===o.f.Node||Object(r.e)()?l&&(h=u.a.get(l,"sharkKey")):h="undefined"!=typeof window?window.smart&&window.smart.i18:null,h){var m=h[e];return a&&a[0]&&parseInt(a[0])>1&&(m=h[e+".pluralsuffix.other"]),m=s(m,a)||t||e,s(m,n)||t||e}return t||e}},function(e,t,n){"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */t.parse=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var n={},o=t||{},a=e.split(i),c=o.decode||r,u=0;u<a.length;u++){var l=a[u],f=l.indexOf("=");if(!(f<0)){var p=l.substr(0,f).trim(),d=l.substr(++f,l.length).trim();'"'==d[0]&&(d=d.slice(1,-1)),null==n[p]&&(n[p]=s(d,c))}}return n},t.serialize=function(e,t,n){var r=n||{},i=r.encode||o;if("function"!=typeof i)throw new TypeError("option encode is invalid");if(!a.test(e))throw new TypeError("argument name is invalid");var s=i(t);if(s&&!a.test(s))throw new TypeError("argument val is invalid");var c=e+"="+s;if(null!=r.maxAge){var u=r.maxAge-0;if(isNaN(u))throw new Error("maxAge should be a Number");c+="; Max-Age="+Math.floor(u)}if(r.domain){if(!a.test(r.domain))throw new TypeError("option domain is invalid");c+="; Domain="+r.domain}if(r.path){if(!a.test(r.path))throw new TypeError("option path is invalid");c+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");c+="; Expires="+r.expires.toUTCString()}r.httpOnly&&(c+="; HttpOnly");r.secure&&(c+="; Secure");if(r.sameSite){switch("string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite){case!0:c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"strict":c+="; SameSite=Strict";break;default:throw new TypeError("option sameSite is invalid")}}return c};var r=decodeURIComponent,o=encodeURIComponent,i=/; */,a=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function s(e,t){try{return t(e)}catch(t){return e}}},function(e,t,n){"use strict";(function(e){n.d(t,"c",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(0),o=n(4),i=n(1),a=n(8),s=n(10),c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},u=function(){function e(e){this.$req=e}return Object.defineProperty(e.prototype,"vid",{get:function(){var e=o.a.get("_bfa",!1,this.$req);if(null==e)return null!=(e=o.a.get("CTRIP_UBT_M",!0,this.$req))?e.vid:"";var t=e.split(".");return t.length>2?t[1]+"."+t[2]:""},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"union",{get:function(){var e=o.a.get("Union",!1,this.$req),t={sid:"",aid:"",ouid:""};if(!e)return t;for(var n={},r=0,i=e.split("&");r<i.length;r++){n[(s=(a=i[r]).split("="))[0]]=s[1]}for(var a in n)for(var s,c=0,u=s=["allianceid","aid","sid","ouid"];c<u.length;c++){var l=u[c];a.toLowerCase()==l&&(t[l]=n[a])}return t.allianceid&&(t.aid=t.allianceid,delete t.allianceid),t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"language",{get:function(){return a.a.get(this.$req,"language")&&a.a.get(this.$req,"language").replace("_","-")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"currency",{get:function(){return a.a.get(this.$req,"currency")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"url",{get:function(){return Object(i.g)(this.$req).href},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"referrer",{get:function(){return this.$req.headers.referer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"userAgent",{get:function(){return this.$req.headers["user-agent"]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cookie",{get:function(){return this.$req.headers.cookie},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return 0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return 0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"offset",{get:function(){return{height:0,width:0}},enumerable:!1,configurable:!0}),e.prototype.getValue=function(){return this.$req["node-header"]||(this.$req["node-header"]={isOpenBff:a.a.get(this.$req,"isOpenBff"),vid:this.vid,union:this.union,language:this.language,currency:this.currency,url:this.url,referrer:this.referrer,userAgent:this.userAgent,cookie:this.cookie,width:this.width,height:this.height,offset:this.offset,traceId:a.a.get(this.$req,"traceId"),isMiniProgram:Object(s.c)(this.$req)}),this.$req["node-header"]},e}();t.a=u;var l=function(t){return!(t||!Object(i.e)())&&{platform:r.f.Node,channel:e.channel,nodePlatform:e.platform,enviroment:e.env}},f=function(e){if((!e||!e.state||!e.state.header)&&Object(i.e)())return!1;if(!Object(i.e)())return!1;var t=e.state.header,n=t.platform;return c(c({},t),{nodePlatform:n,platform:r.f.Bff})}}).call(this,n(38))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.getLang=function(e){return window.i18n_330151&&window.i18n_330151[e]||u[e]},t.pageId=function(e){window.__bfi.push(["_asynRefresh",{page_id:e}])},t.tracklog=function(e,t,n){window.__bfi.push(["_tracklog",e,t,n])},t.trackMetric=function(e,t){window.__bfi.push(["_trackMetric",{name:e,value:1,tag:t}])},t.getDownloadUrl=function(e,t){var n=e;if(!n.aid||!n.sid){var r=d();if(r&&r.aid&&r.sid)n.aid=r.aid,n.sid=r.sid;else{var o=h()||{};n.aid=o.aid,n.sid=o.sid}}var i=!1;window.getDownloadUrlData||(window.getDownloadUrlData=n);window.getDownloadUrlDeeplinkUrl||(window.getDownloadUrlDeeplinkUrl=t);window.getDownloadUrlData&&window.getDownloadUrlData.aid===n.aid&&window.getDownloadUrlData.sid===n.sid&&window.getDownloadUrlData.pageid===n.pageid&&window.getDownloadUrlDeeplinkUrl===t&&(i=!0);if(window.getDownloadUrl&&i)return a=window.getDownloadUrl,c=Object.prototype.toString.call(a),{"[object String]":Promise.resolve(a),"[object Promise]":a}[c];var a,c;return window.getDownloadUrl=t?m(Object.assign({},n,{deeplink:t})):function(){return new Promise((function(e){(0,s.default)({type:"POST",url:"/restapi/soa2/13618/json/getUniversalLink",contentType:"application/json;charset=utf-8",data:JSON.stringify({head:{isQuickBooking:0,clientSignTime:0,source:"wap",locale:l("ibu_h5_local")||l("ibulocale")||"en-us"},targetSource:"APP",sourceRefererUrl:document.referrer,sourceUrl:window.location.href}),dataType:"json",success:function(t){e((t||{}).targetUrl||"")},error:function(){e("")}})}))}().then((function(e){return m(Object.assign({},n,{deeplink:e}))})),window.getDownloadUrl},t.isWindowExist=function(){return"undefined"!=typeof window},t.formatLocale=function(e){return e.toLowerCase().replace("_","-")},t.pushMetricData=function(e,t){void 0===window.__bfi&&(window.__bfi=[]);__bfi.push(["_trackMetric",{name:e,value:1,tag:Object.assign({},t)}])},t.setQueryString=function(e,t,n,r){var o=e.indexOf("?");if(-1!==o){var i=e.substr(o+1).split("&");if(i&&i.length){var a={};i.forEach((function(e){var t=e.split("=")[0],n=new RegExp("(^|&)"+t+"=([^&]*)(&|$)","i"),r=e.match(n);null!=r&&(a[t]=r[2])})),a[t]=n,r&&r.length&&r.forEach((function(e){delete a[e]}));var s="";for(var c in a)s+=c+"="+a[c]+"&";return s=s.substr(0,s.length-1),e.substr(0,o)+"?"+s}}return e+"?"+t+"="+n},t.isSupportWebp=function(){if("undefined"!=typeof window)return document.createElement("canvas")&&document.createElement("canvas").toDataURL("image/webp")&&0==document.createElement("canvas").toDataURL("image/webp").indexOf("data:image/webp");return!1};var o=c(n(48)),i=c(n(34)),a=c(n(69)),s=c(n(35));function c(e){return e&&e.__esModule?e:{default:e}}"undefined"!=typeof window&&void 0===window.__bfi&&(window.__bfi=[]);var u={};function l(e){return(new o.default).get(e)}function f(e){var t=new RegExp("(^|&)"+e+"=([^&]*)(&|$)","i"),n=window.location.search.substr(1).match(t);return null!=n?decodeURIComponent(n[2]):null}function p(e){if(e&&window.sessionStorage&&window.sessionStorage.getItem(e)){var t=window.sessionStorage.getItem(e);try{return JSON.parse(t)}catch(t){console.log("parse item of key["+e+"] failed")}}return null}function d(){var e=f("allianceid"),t=f("sid");if(e&&t)return{aid:e,sid:t};var n=p("ibu_union")||{};return!(!n.aid||!n.sid)&&n}function h(){var e={aid:"",sid:"",ouid:""},t="undefined"!=typeof window&&(l("Union")||window.location.search.substr(1));if(!t)return e;var n=t.split("&");if(n.length>=2){var r=n[0].split("=");r.length>=2&&("allianceid"===r[0].toLowerCase()||"aid"===r[0].toLowerCase())&&(e.aid=r[1]);var o=n[1].split("=");if(o.length>=2&&"sid"===o[0].toLowerCase()&&(e.sid=o[1]),n.length>=3){var i=n[2].split("=");i.length>=2&&"ouid"===i[0].toLowerCase()&&(e.ouid=i[1])}}return e}function m(e){return new Promise((function(t){var n="/m/downapp?utm_medium=wap";(0,s.default)({type:"POST",url:"/restapi/soa2/14717/json/getDownloadLink",contentType:"application/json;charset=utf-8",data:JSON.stringify(e),dataType:"json",success:function(e){var r=e.downloadUrl||n;window.getDownloadUrl=r,t(r)},error:function(){window.getDownloadUrl=n,t(n)}})}))}t.default={isEmail:function(e){return/^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/.test(e)},emailSurfixFilter:function(e,t){if(-1!==t.indexOf("@")&&"@"!==t){var n=t.slice(t.indexOf("@"));return e.filter((function(e){return-1!==e.indexOf(n)&&e!==n})).map((function(e){var r=t+e.slice(n.length),o=r.split("@")[0]+'<span style="color: #0186E4">@'+r.split("@")[1]+"</span>";return{text:r,html:o}}))}},setStorage:function(e,t){e&&window.localStorage.setItem(e,JSON.stringify(t))},getStorage:function(e){if(e){var t=window.localStorage.getItem(e);try{return JSON.parse(t)}catch(e){}}},getSessionStorage:p,setSessionStorage:function(e,t){if(e){if(window.sessionStorage){var n=JSON.stringify(t);try{window.sessionStorage.setItem(e,n)}catch(t){console.log("set item of key["+e+"] failed")}}}else console.error("Cannot cache item with empty key")},getRootDomain:function(e){for(var t=e,n=document.domain,r="",o="",i=0;i<t.length;i++)if(r=t[i],-1!==n.indexOf(r)){o=r;break}return o},getCookie:l,setCookie:function(e,t,n){var a=new Date;a.setDate(a.getDate()+7),n=n||{expires:a},(new o.default).set(e,t,r({domain:this.getRootDomain(i.default.rootDomain),path:"/"},n))},stringFormat:function(){var e=arguments;return e[0]?e[0].replace(/\{(\d+)\}/g,(function(t,n){return e[n-0+1]})):""},changePosition:function(e,t,n){var r=e.indexOf(t),o=e.indexOf(n);e.splice(r,1,n),e.splice(o,1,t)},getQueryString:f,getBrowserLocale:function(e){if(-1!==["zh-hk","zh-tw","zh"].indexOf(e))return"zh-hk";var t=e;return e&&e.length<=2&&(t=(a.default.languageToLocale[e]||"").toLowerCase()),a.default.localeMapping[t]||t&&-1!==t.indexOf("en")&&(t="en-us"),t},isTrip:function(){var e=window.location.hostname;return e&&-1!==e.indexOf(".trip")},getVid:function(){var e=l("_bfa"),t=e?e.split("."):[];return t&&t.length>2?t[1]+"."+t[2]:""},parseUnionCookie:h,parseCobrandingUnion:d}},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";var r;function o(e){r=e}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return c}));var r=n(0),o=n(1),i=n(8),a=n(10),s=Object(a.e)();t.a=function(){var e=r.f.RN;if("undefined"!=typeof document){var t=location.href;e=0===t.indexOf("http")?!s||t.indexOf("//m.")>-1||t.indexOf("/m/")>-1||t.indexOf("wap.")>-1?r.f.H5:r.f.Online:r.f.Hybrid}else Object(o.e)()&&(e=r.f.Node);return e};var c=function(e){return i.a.get(e,"nodePlatform")}},function(e,t,n){"use strict";t.a={ver:"2020-09-18 10:22:11",getVer:function(){return this.ver},setVer:function(e){return this.ver||(this.ver=e),this.ver}}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,"a",(function(){return i}));var o={RootMessageId:!0,CLOGGING_TRACE_ID:!0};function i(e){var t={};try{if("object"===r(e)){var n=e.ResponseStatus||e.responseStatus,i=n&&(n.Extension||n.extension);if(i)for(var a=0;a<i.length;a++){var s=i[a],c=s.Id||s.id,u=s.Value||s.value;c&&u&&c in o&&(t[c]=u)}}}catch(e){}return t}},function(e,t,n){"use strict";function r(e){if(e instanceof Error)return e;var t=new Error("");return t.event=e,t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=null,o=n(3),i=n(16),a=n(1),s={},c=function(e,t,n){var r=t||"";s[e]&&s[e].show&&s[e].show(r,n)},u=function(e){null!=e?s[e]&&s[e].hide&&s[e].hide():Object.keys(s).forEach((function(e){s[e]&&s[e].hide&&s[e].hide()}))};t.a={show:function(e,t,n){void 0===t&&(t=2e3),r?r(e):null!=n&&"Online"==Object(a.f)().platform?c(n,e):e&&(o.b.get(i.a).assistComponent.props.content=e,o.b.get(i.a).assistComponent.props.visible=!0,o.b.change(i.a),setTimeout((function(){o.b.get(i.a).assistComponent.props.visible=!1,o.b.change(i.a)}),t))},hide:function(e){u(e)}}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=u.length;t;){for(c=u,u=[];++f<t;)c&&c[f].run();f=-1,t=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(48),i=(r=o)&&r.__esModule?r:{default:r};var a=function(e){return(new i.default).get(e)};function s(e){return{itit:"it-IT",en:"en-US",english:"en-US",jp:"ja-JP",kr:"ko-KR",fr:"fr-FR",de:"de-DE",es:"es-ES",ru:"ru-RU",tw:"zh-HK",hk:"zh-HK",ensg:"en-SG",enau:"en-AU",enhk:"en-HK",my:"ms-MY",id:"id-ID",th:"th-TH"}[e]||"en-US"}function c(e){var t="trip"===a("ibu_h5_group"),n=s((a("ibu_h5_lang")||"en").toLowerCase()).toLowerCase(),r=a("ibu_h5_lang")||"en";return"register"===e?"https://pages.trip.com/service-guideline/terms-"+n+".html":t?"https://pages.trip.com/service-guideline/terms-"+n+".html?noTitle=true":"https://pages.english.ctrip.com/terms/service-clause-"+r+".html?forapp=true"}function u(e){var t="trip"===a("ibu_h5_group"),n=s((a("ibu_h5_lang")||"en").toLowerCase()).toLowerCase(),r=a("ibu_h5_lang")||"en";return"register"===e?"https://pages.trip.com/service-guideline/privacy-policy-"+n+".html":t?"https://pages.trip.com/service-guideline/privacy-policy-"+n+".html?noTitle=true":"https://pages.english.ctrip.com/terms/ctrip-privacy-policy-"+r+".html?forapp=true"}t.default={language:s((a("ibu_h5_lang")||"en").toLowerCase()),lang:a("ibu_h5_lang")||"en",multiTerms:c("register"),multiPolicy:u("register"),thirdMultiTerms:c("third"),thirdMultiPolicy:u("third"),rootDomain:["ctrip.com.hk","ctrip.co.kr","ctrip.co.id","ctrip.co.th","ctrip.com","ctrip.sg","ctrip.my","trip.com","qa.nt.ctripcorp.com.hk","qa.nt.ctripcorp.co.kr","qa.nt.ctripcorp.co.id","qa.nt.ctripcorp.co.th","qa.nt.tripcorp.com","qa.nt.ctripcorp.com","qa.nt.ctripcorp.sg","qa.nt.ctripcorp.my"],getCrossOriginTicketSyncPage:"/m/html/CrossOriginTicket.html"}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(options){function empty(){}function obj2Url(e){if(e&&e instanceof Object){var t=[];for(var n in e)e.hasOwnProperty(n)&&("function"==typeof e[n]&&(e[n]=e[n]()),null==e[n]&&(e[n]=""),t.push(escape(n)+"="+escape(e[n])));return t.join("&").replace(/%20/g,"+")}return e}var opt={url:"",sync:!0,type:"GET",data:null,username:null,password:null,contentType:null,dataType:null,success:empty,error:empty,complete:empty,timeout:0};for(var i in options)options.hasOwnProperty(i)&&(opt[i]=options[i]);var accepts={script:"text/javascript, application/javascript, application/x-javascript",json:"application/json",xml:"application/xml, text/xml",html:"text/html",text:"text/plain"},abortTimeout=null,xhr=new XMLHttpRequest,protocol=/^([\w-]+:)\/\//.test(opt.url)?RegExp.$1:window.location.protocol;xhr.onreadystatechange=function(){if(4===xhr.readyState){var result,dataType;if(xhr.onreadystatechange=empty,clearTimeout(abortTimeout),xhr.status>=200&&xhr.status<300||304===xhr.status||0===xhr.status&&"file:"===protocol){if("arraybuffer"===xhr.responseType||"blob"===xhr.responseType)result=xhr.response;else{for(var i in result=xhr.responseText,dataType=opt.dataType?opt.dataType:xhr.getResponseHeader("content-type").split(";",1)[0],accepts)accepts.hasOwnProperty(i)&&accepts[i].indexOf(dataType)>-1&&(dataType=i);try{"script"===dataType?eval(result):"xml"===dataType?result=xhr.responseXML:"json"===dataType&&(result=""===result.trim()?null:JSON.parse(result))}catch(e){return opt.error(e,xhr),void xhr.abort()}}opt.success(result,xhr)}else opt.error(xhr,xhr.statusText);opt.complete(xhr,xhr.status)}},xhr.open(opt.type,opt.url,opt.sync,opt.username,opt.password),"POST"===opt.type&&xhr.setRequestHeader("Content-type",opt.contentType?opt.contentType:"application/json"),opt.timeout>0&&(abortTimeout=setTimeout((function(){xhr.onreadystatechange=empty,xhr.abort(),opt.error("timeout",xhr)}),opt.timeout)),xhr.send(opt.data?obj2Url(opt.data):null),_tripComponentRequest.trackAjax&&(0,_tripComponentRequest.trackAjax)(xhr,opt.url)};var _tripComponentRequest=__webpack_require__(96)},function(e,t,n){"use strict";(function(t){var r=n(12),o=n(75),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t)&&(s=n(43)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(i)})),e.exports=c}).call(this,n(33))},function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return s}));var r=n(0),o=n(18),i=n(4),a=r.d.unknown,s=function(){return a};t.a=function(t,n){var a=r.d.DEV;switch(t){case r.f.H5:case r.f.Online:t=t;var s=location.origin||location.host;-1!==s.indexOf("trip")&&(a=-1!==s.indexOf("dev")?r.d.DEV:-1!==s.indexOf("fat")||-1!==s.indexOf("fws")?r.d.FAT:-1!==s.indexOf("uat")?r.d.UAT:r.d.PROD);break;case r.f.Node:var c=(e.env.ottd_smart_env||"").toString().toLowerCase();return"dev"===c?r.d.DEV:"fat"===c||"fws"===c?r.d.FAT:"uat"===c?r.d.UAT:r.d.PROD;case r.f.Hybrid:var u=i.a.get("CINFO",!0);if(u&&u.env)switch(u.env.toUpperCase()){case"PROD":return r.d.PROD;case"UAT":return r.d.UAT;case"FAT":return r.d.FAT;case"DEV":return r.d.DEV;default:return r.d.PROD}return r.d.PROD;case r.f.RN:a=Object(o.c)().enviroment}return a}}).call(this,n(33))},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"===("undefined"==typeof window?"undefined":n(window))&&(r=window)}e.exports=r},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(8),o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(e){var t=(e.split("?")[1]||"").split("&")||[],n={};return t.map((function(e){var t=e.split("=");return n[t[0]]=decodeURIComponent(t[1]),e})),o({},n)},a=function(e){var t=e||location,n=t.hostname,a=t.protocol,s={hostname:n,pathname:t.path,protocol:a};if(e){var c=(e.headers.host||"").split(":").reverse()[0],u=a+"://"+n+(c?":"+c:""),l=u+e.originalUrl;return o(o({},s),{origin:u,href:l,port:c,regexParam:e.params,query:e.query,body:e.body})}return o(o({},s),{href:location.href,origin:location.origin,port:location.port,regexParam:r.a.get(null,"query"),query:i(location.search),body:{}})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return ge})),__webpack_require__.d(__webpack_exports__,"a",(function(){return AntiCrawler}));var _interface__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(11),_http_index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(14),_enviroment_interface__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(0),_enviroment__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),__extends=(_extendStatics=function(e,t){return(_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}_extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),_extendStatics,__assign=function(){return(__assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},_a=Object(_enviroment__WEBPACK_IMPORTED_MODULE_3__.d)(),cid=_a.cid,_b=_a.pageInfo,pageInfo=void 0===_b?{}:_b,platform=_a.platform,ge=function(e,t){void 0===t&&(t="");var n=e.split("."),r=n[0],o=n[1],i=t.split("."),a=i[0],s=i[1];return~~r>=~~a&&~~o>=~~s},BaseAntiCrawler=function(){function e(){}return e.prototype.init=function(){},e.prototype.generateCrawlerKey=function(e){},e.prototype.crawlerHandler=function(){var t=this;return e.status===_interface__WEBPACK_IMPORTED_MODULE_0__.a.initial?this.init():e.status===_interface__WEBPACK_IMPORTED_MODULE_0__.a.doing?e.pendingFn.then((function(e){return new Promise(!0===e?function(e){t.generateCrawlerKey(e)}:function(e){e(!1)})})):e.status===_interface__WEBPACK_IMPORTED_MODULE_0__.a.done?new Promise((function(e){t.generateCrawlerKey(e)})):new Promise((function(e){e(!1)}))},e.prototype.getFingerPrintKey=function(){return""},e.prototype.getCrawlerKey=function(){return""},e.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.initial,e}(),OtherAntiCrawler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t}(BaseAntiCrawler),RNAntiCrawler=function(e){function t(n){var r=n.Bridge,o=e.call(this)||this;return o.crnSecrectKey="",r&&(t.Bridge=r),o}return __extends(t,e),t.prototype.init=function(){if(BaseAntiCrawler.status===_interface__WEBPACK_IMPORTED_MODULE_0__.a.initial)return BaseAntiCrawler.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.doing,BaseAntiCrawler.pendingFn=new Promise((function(e,n){"function"!=typeof t.Bridge.callNativeWithCallback?e(!1):t.Bridge.callNativeWithCallback("Business","initGlobalHotel",null,(function(n){console.log(n),t.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.done,e(!0)}))})),BaseAntiCrawler.pendingFn},t.getSignString=function(){var e=Object(_enviroment__WEBPACK_IMPORTED_MODULE_3__.d)(),t=e.cid,n=e.appInternalVersion,r=e.OS;return JSON.stringify(t+"&"+n+"&"+r)},t.prototype.generateCrawlerKey=function(e){var n=this;"function"!=typeof t.Bridge.callNativeWithCallback?e(!1):t.Bridge.callNativeWithCallback("Business","getSignClientKey",{request_value:t.getSignString()},(function(t,r){n.crnSecrectKey=r.result,e(!0)}))},t.prototype.getCrawlerKey=function(){return this.crnSecrectKey},t}(BaseAntiCrawler),WebAntiCrawler=function(_super){function WebAntiCrawler(){var e=null!==_super&&_super.apply(this,arguments)||this;return e.crawlerKey=null,e}return __extends(WebAntiCrawler,_super),WebAntiCrawler.prototype.setWindowVariables=function(){var e=this;window.__ttdAntiCrawlerKey||(this.crawlerKey=window.__ttdAntiCrawlerKey=null,window[WebAntiCrawler.callback]=function(t){e.crawlerKey=window.__ttdAntiCrawlerKey="function"==typeof t?t():t})},WebAntiCrawler.prototype.init=function(){if(this.setWindowVariables(),BaseAntiCrawler.status===_interface__WEBPACK_IMPORTED_MODULE_0__.a.initial)return BaseAntiCrawler.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.doing,BaseAntiCrawler.pendingFn=new Promise((function(e,t){Object(_http_index__WEBPACK_IMPORTED_MODULE_1__.a)({actionUrl:WebAntiCrawler.fingerPrintKeyApi,request:{head:WebAntiCrawler.head},success:function(t){var n=t.link;if(!n)return BaseAntiCrawler.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.failed,void e(!1);var r=document.createElement("script");document.head.appendChild(r),r.src=n,WebAntiCrawler.fingerPrintKey=window.Kar98k.hoteluuidkeys,BaseAntiCrawler.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.done,e(!0)},fail:function(){BaseAntiCrawler.status=_interface__WEBPACK_IMPORTED_MODULE_0__.a.failed,e(!1)}})})),BaseAntiCrawler.pendingFn},WebAntiCrawler.prototype.generateCrawlerKey=function(resolve){Object(_http_index__WEBPACK_IMPORTED_MODULE_1__.a)({actionUrl:WebAntiCrawler.crawlerKeyApi,request:{head:__assign(__assign({},WebAntiCrawler.head),{extension:[{name:"fingerprintKeys",value:WebAntiCrawler.fingerPrintKey}]}),callBack:""+WebAntiCrawler.callback},success:function success(res){var scripts=res&&res.data&&res.data.script;scripts&&eval(scripts),resolve(!0)},fail:function(){resolve(!1)}})},WebAntiCrawler.prototype.getFingerPrintKey=function(){return WebAntiCrawler.fingerPrintKey},WebAntiCrawler.prototype.getCrawlerKey=function(){return this.crawlerKey},WebAntiCrawler.fingerPrintKeyApi="12530/sdtSource",WebAntiCrawler.crawlerKeyApi="12530/crawlerScripting",WebAntiCrawler.callback="__ttdAntiCrawlerCb",WebAntiCrawler.head={cid:cid||pageInfo.clientcode,syscode:platform===_enviroment_interface__WEBPACK_IMPORTED_MODULE_2__.f.RN?"12":platform==_enviroment_interface__WEBPACK_IMPORTED_MODULE_2__.f.Online?"999":"09"},WebAntiCrawler}(BaseAntiCrawler),AntiCrawler=function(){function e(e){this.antiCrawler=new OtherAntiCrawler;var t=Object(_enviroment__WEBPACK_IMPORTED_MODULE_3__.d)(),n=t.OS,r=t.platform,o=t.app_version,i=t.channel,a=(e||{}).Bridge;r===_enviroment_interface__WEBPACK_IMPORTED_MODULE_2__.f.H5&&i===_enviroment_interface__WEBPACK_IMPORTED_MODULE_2__.c.ctrip&&Object(_enviroment__WEBPACK_IMPORTED_MODULE_3__.e)()?this.antiCrawler=new WebAntiCrawler:"android"===n&&ge(o,"8.28.0")&&(this.antiCrawler=new RNAntiCrawler({Bridge:a})),this.antiCrawler.init()}return e.setWhiteList=function(t){e.whiteList||(e.whiteList=t)},e.getWhiteList=function(){return e.whiteList},e.prototype.init=function(){return console.log("init"),this.antiCrawler.init()},e.prototype.antiCrawlerhandler=function(){return this.antiCrawler.crawlerHandler()},e.prototype.getFingerPrintKey=function(){return this.antiCrawler.getFingerPrintKey()},e.prototype.getCrawlerKey=function(){return this.antiCrawler.getCrawlerKey()},e.whiteList=null,e}()},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(12),o=n(76),i=n(78),a=n(79),s=n(80),c=n(44);e.exports=function(e){return new Promise((function(t,u){var l=e.data,f=e.headers;r.isFormData(l)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,u,r),p=null}},p.onerror=function(){u(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var m=n(81),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(f,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),u(e),p=null)})),void 0===l&&(l=null),p.send(l)}))}},function(e,t,n){"use strict";var r=n(77);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(){return!!navigator.userAgent.match(/firefox/i)}function o(){return!!navigator.userAgent.match(/opera/i)||!!navigator.userAgent.match(/opr/i)}function i(){return!!navigator.userAgent.match(/micromessenger/i)}function a(){return!!navigator.userAgent.match(/Chrome\/([\d.]+)/i)||!!navigator.userAgent.match(/CriOS\/([\d.]+)/i)}function s(){return!!navigator.userAgent.match(/baidubrowser/i)}function c(){return!!navigator.userAgent.match(/UCBrowser/i)}function u(){return!!navigator.userAgent.match(/MQQBrowser/i)}function l(){return!!navigator.userAgent.match(/weibo/i)}function f(){return!!navigator.userAgent.match(/Alipay/i)}Object.defineProperty(t,"__esModule",{value:!0}),t.isFirefox=r,t.isOpera=o,t.isAndroid=function(){return!!navigator.userAgent.match(/Android/i)},t.isIOS=function(){return!!navigator.userAgent.match(/iPhone|iPad|iPod/i)},t.isWx=i,t.isChrome=a,t.isBaidu=s,t.isUC=c,t.isSafari=function(){return!!navigator.userAgent.match(/safari/i)},t.isQQBrowser=u,t.isWeibo=l,t.isAlipay=f,t.isIE=function(){return!!navigator.userAgent.match(/mise/i)},t.isBlockedBrowser=function(){return r()||i()||c()||o()||f()||l()||s()},t.isPassedBrowser=function(){return a()||u()}},function(e,t,n){"use strict";n.r(t);var r=n(23);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){void 0===t&&(t={});var n=function(e){if(e&&"j"===e[0]&&":"===e[1])return e.substr(2);return e}(e);if(function(e,t){return void 0===t&&(t=!e||"{"!==e[0]&&"["!==e[0]&&'"'!==e[0]),!t}(n,t.doNotParse))try{return JSON.parse(n)}catch(e){}return e}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var s=n(68),c=function(){function e(e){this.changeListeners=[],this.TESTING_ONETWO=2,this.cookies=function(e){return"string"==typeof e?r.parse(e):"object"===o(e)&&null!==e?e:{}}(e),this.HAS_DOCUMENT_COOKIE="object"===("undefined"==typeof document?"undefined":o(document))&&"string"==typeof document.cookie}return e.prototype._updateBrowserValues=function(){this.HAS_DOCUMENT_COOKIE&&(this.cookies=r.parse(document.cookie))},e.prototype._emitChange=function(e){for(var t=0;t<this.changeListeners.length;++t)this.changeListeners[t](e)},e.prototype.get=function(e,t){return void 0===t&&(t={}),this._updateBrowserValues(),i(this.cookies[e],t)},e.prototype.getAll=function(e){void 0===e&&(e={}),this._updateBrowserValues();var t={};for(var n in this.cookies)t[n]=i(this.cookies[n],e);return t},e.prototype.set=function(e,t,n){var o;"object"===a(t)&&(t=JSON.stringify(t)),this.cookies=s({},this.cookies,((o={})[e]=t,o)),this.HAS_DOCUMENT_COOKIE&&(document.cookie=r.serialize(e,t,n)),this._emitChange({name:e,value:t,options:n})},e.prototype.remove=function(e,t){var n=t=s({},t,{expires:new Date(1970,1,1,0,0,1),maxAge:0});this.cookies=s({},this.cookies),delete this.cookies[e],this.HAS_DOCUMENT_COOKIE&&(document.cookie=r.serialize(e,"",n)),this._emitChange({name:e,value:void 0,options:t})},e.prototype.addChangeListener=function(e){this.changeListeners.push(e)},e.prototype.removeChangeListener=function(e){var t=this.changeListeners.indexOf(e);t>=0&&this.changeListeners.splice(t,1)},e}();t.default=c},function(e,t,n){"use strict";var r=n(0),o=n(18),i=n(8);t.a=function(e,t){var n=r.c.ctrip;switch(e){case r.f.H5:case r.f.Online:if(location.href.indexOf("ctrip=true")>-1)n=r.c.ctrip;else if(location.href.indexOf("trip=true")>-1)n=r.c.trip;else{-1===(location.origin||location.host).indexOf(".ctrip")&&(n=r.c.trip)}break;case r.f.Node:return"ctrip"===i.a.get(t,"channel").toString().toLowerCase()?r.c.ctrip:r.c.trip;case r.f.Hybrid:n=r.c.ctrip;break;case r.f.RN:n=Object(o.c)().channel}return n}},function(e,t,n){"use strict";var r=n(0),o=r.e.unknown;t.a=function(){if("undefined"!=typeof document&&window.clientInformation&&window.clientInformation.connection){var e=window.clientInformation.connection;switch(e.effectiveType){case"4g":return 0===e.rtt?r.e.offline:r.e["4G"];case"3g":return r.e["3G"];case"2g":return r.e["2G"];default:return r.e.unknown}}else{var t=window.CtripUtil&&window.CtripUtil.app_check_network_status;t&&t((function(e){!function(e){switch(e){case"2G":o=r.e["2G"];break;case"3G":o=r.e["3G"];break;case"WIFI":case"4G":o=r.e["4G"];break;case"None":o=r.e.offline;break;default:o=r.e.unknown}}(e.networkType)}))}return o}},function(e,t,n){"use strict";var r=n(0),o=n(1),i=n(4),a=n(8),s=n(10);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u,l=function(){return(l=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},f={page:"",hybrid:"",prevpage:"",sid:"",pvid:"",clientcode:"",vid:""};"undefined"!=typeof window&&void 0!==window.CtripUBT&&"function"==typeof window.CtripUBT.getCurrentPageInfo?window.CtripUBT.getCurrentPageInfo((function(e){f=Object.assign(f,l({},e)),"function"==typeof u&&u()})):"function"==typeof u&&u();var p=function(e){var t=i.a.get("_bfa",!1,e);if(null==t)return null!=(t=i.a.get("CTRIP_UBT_M",!0,e))?t.vid:"";var n=t.split(".");return n.length>2?n[1]+"."+n[2]:""},d=function(e){return i.a.get("GUID",!1,e)},h=function(e){var t=i.a.get("Union",!1,e),n={sid:"",aid:"",ouid:""};if(!t)return n;for(var r=t.split("&"),o={},a=0;a<r.length;a++){o[(c=r[a].split("="))[0]]=c[1]}for(var s in o)for(var c=["allianceid","aid","sid","ouid"],u=0;u<c.length;u++){var l=c[u];s.toLowerCase()==l&&(n[l]=o[s])}return n.allianceid&&(n.aid=n.allianceid,delete n.allianceid),n},m=function(e){var t=(i.a.get("ibu_h5_local",!1,e)||"").split("-"),n=(i.a.get("ibulocale",!1,e)||"").split(/-|_/);return((Object(o.f)().channel===r.c.ctrip?"zh-CN":Object(o.f)().platform===r.f.H5?t[1]&&t[0]+"-"+t[1].toUpperCase():n[1]&&n[0]+"-"+n[1].toUpperCase())||"").replace("_","-")},g=function(e){return((Object(o.f)().channel===r.c.ctrip?"CNY":Object(o.f)().platform===r.f.H5?i.a.get("ibu_h5_curr",!1,e):i.a.get("cookiePricesDisplayed",!1,e))||"").toUpperCase()};t.a=function(e){var t,n=window&&window.navigator&&window.navigator.userAgent||"";return void 0!==("undefined"==typeof window?"undefined":c(window))&&window.smart&&void 0!==window.smart.isOpenBff&&(t=window.smart.isOpenBff),{pageInfo:f,isOpenBff:t,cid:d(e),vid:p(e),union:h(e),url:e?e.protocol+"://"+e.headers.host+e.originalUrl:Object(o.f)().platform==r.f.Hybrid?location.hash:location.href,referrer:e?e.headers.referer:document.referrer,language:m(),currency:g(),userAgent:e?e.headers["user-agent"]:navigator.userAgent,cookie:e?e.headers.cookie:document.cookie,isMiniProgram:Object(s.c)(),width:e?0:window.screen.width,height:e?0:window.innerHeight,traceId:a.a.get(e,"traceId"),offset:{height:e?0:document.body.clientHeight||document.documentElement.clientHeight,width:e?0:document.body.clientWidth||document.documentElement.clientWidth},isBot:Object(s.b)(),isInApp:/Ctrip_CtripWireless|Trip\.com_CtripWireless/.test(n)}}},function(e,t,n){"use strict";t.a={defaultH5ClientID:"CLIENT_ID",token:"5d3015dbdd56e9002273bddd-6183ad8df6595c4f",mockPlatform:"app",marsUrl:"",getMarsUrl:function(e){return this.marsUrl||(this.marsUrl="http://mars.ibu.ctripcorp.com/mid/"+e+"/token-"+this.token+"/platform-"+this.mockPlatform+"/"),this.marsUrl}}},function(e,t,n){var r;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var i={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=o(n);if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)&&n.length){var s=a.apply(null,n);s&&e.push(s)}else if("object"===r)for(var c in n)i.call(n,c)&&n[c]&&e.push(c)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):"object"===o(n(41))&&n(41)?void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r):window.classNames=a}()},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(2),a=l(i),s=l(n(25)),c=l(n(70)),u=l(n(89));function l(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==r(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.isCalculateOuid=function(e){return null===e||""===e||"SEOBrand"===e||"SEONonBrand"===e},n.getOuid=function(e){var t=e.baseUrl,r=e.urlReferer,o=e.dsCid,i=e.dsKid,a=e.ouid,l=e.aid,f=e.sid,p={ctag:"url="+encodeURIComponent(t)+"&referral="+encodeURIComponent(r)+"&pageid="+n.props.pageId+"&ds_cid="+o+"&ds_kid="+i+"&ouid="+a};(0,c.default)(u.default.getOuid,p,{errorFilter:!1}).then((function(e){n.setState({aid:l,sid:f,ouid:e.ouid||""}),s.default.setSessionStorage("ibu_union",{aid:l,sid:f,ouid:e.ouid||""})})).catch((function(e){console.log(e)}))},n.init=function(){var e=document.referrer||null,t=window.location.href,r=s.default.getQueryString("AllianceID")||s.default.getQueryString("aid"),o=s.default.getQueryString("SID"),i=s.default.getQueryString("OUID"),a=s.default.getQueryString("ds_cid"),l=s.default.getQueryString("ds_kid");if(!window||!0!==window.hasloadaidsid)if(window&&(window.hasloadaidsid=!0),r&&o)n.isCalculateOuid(i)?n.getOuid({baseUrl:t,urlReferer:e,dsCid:a,dsKid:l,ouid:i,aid:r,sid:o}):(n.setState({aid:r,sid:o,ouid:i}),s.default.setSessionStorage("ibu_union",{aid:r,sid:o,ouid:i}));else if(e){var f={referrer:e,url:t};(0,c.default)(u.default.getAidAndSid,f,{errorFilter:!1}).then((function(r){r.aid&&r.sid&&(n.isCalculateOuid(r.ouid)?n.getOuid({baseUrl:t,urlReferer:e,dsCid:a,dsKid:l,aid:r.aid,sid:r.sid,ouid:r.ouid}):(n.setState({aid:r.aid,sid:r.sid,ouid:r.ouid}),s.default.setSessionStorage("ibu_union",{aid:r.aid,sid:r.sid,ouid:r.ouid})))})).catch((function(e){console.log(e)}))}else console.log("Nothing To DO")},n.state={aid:null,sid:null,ouid:null},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+r(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){return a.default.createElement("div",{style:{display:"none"}},this.state.aid&&this.state.sid&&a.default.createElement("iframe",{src:"/m/home/TurnPageTaNew/?allianceid="+this.state.aid+"&sid="+this.state.sid+"&ouid="+(this.state.ouid||"")}))}}]),t}(i.Component);f.defaultProps={pageId:null},e.exports=f},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"GET",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET";return e&&t&&e.toUpperCase()===t.toUpperCase()}(e.method,t.method)&&e.url===t.url&&function(e,t){if(i(e)===i(t)){if("object"===i(e)&&null!==e)try{return JSON.stringify(e)===JSON.stringify(t)}catch(e){return!1}return e===t}return!1}(e.data,t.data)}n.d(t,"a",(function(){return s}));var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"maxSize",void 0),o(this,"cacheList",void 0),this.maxSize=30,this.cacheList=[]}var t,n,i;return t=e,(n=[{key:"exist",value:function(e){return!!this.get(e)}},{key:"get",value:function(e){for(var t=this.cacheList,n=0;n<t.length;n++){var r=t[n],o=r.option,i=r.promise;if(a(o,e))return i}}},{key:"add",value:function(e,t){this.exist(e)||(this.cacheList.push({option:e,promise:t}),this.cacheList.length>this.maxSize&&this.cacheList.shift())}}])&&r(t.prototype,n),i&&r(t,i),e}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r={"text/javascript":"script","application/javascript":"script","application/x-javascript":"script","application/json":"json","text/html":"document","text/plain":"text","application/octet-stream":"blob"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(e){var t=e;return t.get=t.get||function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n.method="GET",n.url=e,t(n)},t.post=t.post||function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.method="POST",r.url=e,r.data=n,t(r)},t.put=t.put||function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.method="PUT",r.url=e,r.data=n,t(r)},t}},,function(e,t,n){n(60),e.exports=n(95)},function(e,t){"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(null!=r)for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t})},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t){Array.prototype.find||(Array.prototype.find=function(e){for(var t=0,n=this.length;t<n;t++){var r=this[t];if(e(r))return r}return null})},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,c=a(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(c[l]=n[l]);if(r){s=r(n);for(var f=0;f<s.length;f++)i.call(n,s[f])&&(c[s[f]]=n[s[f]])}}return c}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={currentSupportLocales:["en-us","zh-hk","ko-kr","ja-jp","en-sg","en-au","de-de","fr-fr","es-es","ru-ru"],languageToLocale:{en:"en-XX",english:"en-XX",jp:"ja-JP",ja:"ja-JP",kr:"ko-KR",ko:"ko-KR",fr:"fr-FR",de:"de-DE",es:"es-ES",ru:"ru-RU",tw:"zh-HK",hk:"zh-HK",sg:"en-SG",ensg:"en-SG",enau:"en-AU",my:"ms-MY",ms:"ms-MY",id:"id-ID",th:"th-TH",it:"it-IT",nl:"nl-NL",tr:"tr-TR",el:"el-GR",pl:"pl-PL",vi:"vi-VN"},localeToAccurateTripUrl:{"en-us":"//www.trip.com/m","zh-hk":"//hk.trip.com/m","zh-tw":"//hk.trip.com/m","ko-kr":"//kr.trip.com/m","ja-jp":"//jp.trip.com/m","en-sg":"//sg.trip.com/m","en-au":"//au.trip.com/m","fr-fr":"//fr.trip.com/m","de-de":"//de.trip.com/m","es-es":"//es.trip.com/m","ru-ru":"//ru.trip.com/m","it-it":"//it.trip.com/m"},localeToAccurateTripUrlByBandReinforceFat1:{"en-us":"//www.fat1.qa.nt.tripcorp.com","zh-hk":"//hk.fat1.qa.nt.tripcorp.com","en-hk":"//hk.fat1.qa.nt.tripcorp.com","zh-tw":"//hk.fat1.qa.nt.tripcorp.com","ko-kr":"//kr.fat1.qa.nt.tripcorp.com","ja-jp":"//jp.fat1.qa.nt.tripcorp.com","en-sg":"//sg.fat1.qa.nt.tripcorp.com","en-au":"//au.fat1.qa.nt.tripcorp.com","fr-fr":"//fr.fat1.qa.nt.tripcorp.com","de-de":"//de.fat1.qa.nt.tripcorp.com","es-es":"//es.fat1.qa.nt.tripcorp.com","ru-ru":"//ru.fat1.qa.nt.tripcorp.com","it-it":"//it.fat1.qa.nt.tripcorp.com"},localeToMultiSiteName:{},localeToAllSites:{"en-us":["en-us"],"zh-hk":["zh-hk"],"zh-tw":["zh-hk"],"ko-kr":["ko-kr"],"ja-jp":["ja-jp"],"en-sg":["en-sg"],"en-au":["en-au"],"en-gb":["en-au"],"de-de":["de-de"],"fr-fr":["fr-fr"],"es-es":["es-es"],"ru-ru":["ru-ru"]},countryCodeToLocales:{US:["en-us"],HK:["zh-hk"],KR:["ko-kr"],JP:["ja-jp"],SG:["en-sg"],AU:["en-au"],DE:["de-de"],FR:["fr-fr"],ES:["es-es"],RU:["ru-ru"]},localeToFlag:{"en-us":"f-en","zh-hk":"f-cn","zh-tw":"f-cn","ko-kr":"f-kr","ja-jp":"f-jp","en-sg":"f-sg","en-au":"f-au","fr-fr":"f-fr","de-de":"f-de","es-es":"f-es","ru-ru":"f-ru"},localeToAccurateTripUrlByBandReinforce:{"en-us":"//www.trip.com","zh-hk":"//hk.trip.com","zh-tw":"//hk.trip.com","ko-kr":"//kr.trip.com","ja-jp":"//jp.trip.com","en-sg":"//sg.trip.com","en-au":"//au.trip.com","fr-fr":"//fr.trip.com","de-de":"//de.trip.com","es-es":"//es.trip.com","ru-ru":"//ru.trip.com"},localeMapping:{"en-xx":{displayName:"English",url:"https://www.trip.com/m/?locale=en-XX",iconClass:"f-xx"},"en-us":{displayName:"English%20%28United%20States%29",url:"https://www.trip.com/m/?locale=en-US",iconClass:"f-en"},"zh-hk":{displayName:"%u7E41%u9AD4%u4E2D%u6587%20%28%u9999%u6E2F%29",url:"https://hk.trip.com/m/?locale=zh-HK",iconClass:"f-cn"},"ko-kr":{displayName:"%uD55C%uAD6D%uC5B4",url:"https://kr.trip.com/m/?locale=ko-KR",iconClass:"f-kr"},"ja-jp":{displayName:"%u65E5%u672C%u8A9E",url:"https://jp.trip.com/m/?locale=ja-JP",iconClass:"f-jp"},"en-sg":{displayName:"English%20%28Singapore%29",url:"https://sg.trip.com/m/?locale=en-SG",iconClass:"f-sg"},"en-au":{displayName:"English%20%28Australia%29",url:"https://au.trip.com/m/?locale=en-AU",iconClass:"f-au"},"en-my":{displayName:"English%20%28Malaysia%29",url:"https://my.trip.com/m/?locale=en-MY",iconClass:"f-my"},"en-gb":{displayName:"English%20%28United%20Kingdom%29",url:"https://uk.trip.com/m/?locale=en-GB",iconClass:"f-uk"},"de-de":{displayName:"Deutsch%20%28Deutschland%29",url:"https://de.trip.com/m/?locale=de-DE",iconClass:"f-de"},"fr-fr":{displayName:"Fran%E7ais%20%28France%29",url:"https://fr.trip.com/m/?locale=fr-FR",iconClass:"f-fr"},"es-es":{displayName:"Espa%F1ol",url:"https://es.trip.com/m/?locale=es-ES",iconClass:"f-es"},"ru-ru":{displayName:"%u0420%u0443%u0441%u0441%u043A%u0438%u0439",url:"https://ru.trip.com/m/?locale=ru-RU",iconClass:"f-ru"},"id-id":{displayName:"Bahasa%20Indonesia",url:"https://id.trip.com/m/?locale=id-ID",iconClass:"f-id"},"th-th":{displayName:"%u0E20%u0E32%u0E29%u0E32%u0E44%u0E17%u0E22",url:"https://th.trip.com/m/?locale=th-TH",iconClass:"f-th"},"it-it":{displayName:"Italiano",url:"https://it.trip.com/m/?locale=it-IT",iconClass:"f-it"},"vi-vn":{displayName:"Ti%EA%u0301ng%20Vi%EA",url:"https://vn.trip.com/m/?locale=vi-VN",iconClass:"f-vn"},"nl-nl":{displayName:"Nederlands%20%28Nederland%29",url:"https://nl.trip.com/m/?locale=nl-NL",iconClass:"f-nl"},"pl-pl":{displayName:"Polski",url:"https://pl.trip.com/m/?locale=pl-PL",iconClass:"f-pl"},"el-gr":{displayName:"%u0395%u03BB%u03BB%u03B7%u03BD%u03B9%u03BA%u03AC",url:"https://gr.trip.com/m/?locale=el-GR",iconClass:"f-gr"},"tr-tr":{displayName:"T%FCrk%E7e",url:"https://tr.trip.com/m/?locale=tr-TR",iconClass:"f-tr"},"pt-br":{displayName:"Portugu%EAs%20%28BR%29",url:"https://br.trip.com/m/?locale=pt-BR",iconClass:"f-br"},"nl-be":{displayName:'Nederlands%20%28Belgi%EB%29"',url:"https://be.trip.com/m/?locale=nl_be",iconClass:"f-be"},"fr-be":{displayName:"Fran%E7ais%20%28Belgique%29",url:"https://be.trip.com/m/?locale=fr_be",iconClass:"f-be"},"en-be":{displayName:"English%20%28Belgium%29",url:"https://be.trip.com/m/?locale=en_be",iconClass:"f-be"},"en-ch":{displayName:"English%20%28Switzerland%29",url:"https://ch.trip.com/m/?locale=en_ch",iconClass:"f-ch"},"fr-ch":{displayName:"Fran%E7ais%20%28Suisse%29",url:"https://ch.trip.com/m/?locale=fr_ch",iconClass:"f-ch"},"de-ch":{displayName:"Deutsch%20%28Schweiz%29",url:"https://ch.trip.com/m/?locale=de_ch",iconClass:"f-ch"},"de-at":{displayName:"Deutsch%20%28%D6sterreich%29",url:"https://at.trip.com/m/?locale=de_at",iconClass:"f-at"},"en-ie":{displayName:"English%20%28Ireland%29",url:"https://ie.trip.com/m/?locale=en_ie",iconClass:"f-ie"}},regionPhoneCode:{AD:"376",AE:"971",AF:"93",AG:"1 268 ",AI:"1 264 ",AL:"355",AM:"374",AN:"599",AO:"244",AQ:"672",AR:"54",AS:"1 684 ",AT:"43",AU:"61",AW:"297",AZ:"994",BA:"387",BB:"1 246 ",BD:"880",BE:"32",BF:"226",BG:"359",BH:"973",BI:"257",BJ:"229",BL:"590",BM:"1 441 ",BN:"673",BO:"591",BQ:"599",BR:"55",BS:"1 242 ",BT:"975",BV:"74",BW:"267",BY:"375",BZ:"501",CA:"1",CC:"61",CD:"243",CF:"236",CG:"242",CH:"41",CI:"225",CK:"682",CL:"56",CM:"237",CN:"86",CO:"57",CR:"506",CU:"53",CV:"238",CW:"531",CX:"61",CY:"357",CZ:"420",DE:"49",DJ:"253",DK:"45",DM:"1 767",DO:"1 809",DZ:"213",EC:"593",EE:"372",EG:"20",EH:"212",ER:"291",ES:"34",ET:"251",FI:"358",FJ:"679",FK:"500",FM:"691",FO:"298",FR:"33",GA:"241",GB:"44",GD:"1 473",GE:"995",GF:"594",GH:"233",GI:"350",GL:"299",GM:"220",GN:"224",GP:"590",GQ:"240",GR:"30",GS:"239",GT:"502",GU:"1 671",GW:"245",GY:"592",HK:"852",HM:"334",HN:"504",HR:"385",HT:"509",HU:"36",ID:"62",IE:"353",IL:"972",IN:"91",IO:"246",IQ:"964",IR:"98",IS:"354",IT:"39",JM:"1 876",JO:"962",JP:"81",KE:"254",KG:"996",KH:"855",KI:"686",KM:"269",KN:"1 869",KP:"850",KR:"82",KW:"965",KY:"1 345 ",KZ:"7",LA:"856",LB:"961",LC:"1 758",LI:"423",LK:"94",LR:"231",LS:"266",LT:"370",LU:"352",LV:"371",LY:"218",MA:"212",MC:"377",MD:"373",ME:"382",MF:"1 599",MG:"261",MH:"692",MK:"389",ML:"223",MM:"95",MN:"976",MO:"853",MP:"1 670",MQ:"596",MR:"222",MS:"1 664",MT:"356",MU:"230",MV:"960",MW:"265",MX:"52",MY:"60",MZ:"258",NA:"264",NC:"687",NE:"227",NF:"672",NG:"234",NI:"505",NL:"31",NO:"47",NP:"977",NR:"674",NU:"683",NZ:"64",OM:"968",PA:"507",PE:"51",PF:"689",PG:"675",PH:"63",PK:"92",PL:"48",PM:"508",PN:"870",PR:"1",PS:"970",PT:"351",PW:"680",PY:"595",QA:"974",RE:"262",RO:"40",RS:"381",RU:"7",RW:"250",SA:"966",SB:"677",SC:"248",SD:"249",SE:"46",SG:"65",SH:"290",SI:"386",SJ:"47",SK:"421",SL:"232",SM:"378",SN:"221",SO:"252",SR:"597",SS:"211",ST:"239",SV:"503",SX:"599",SY:"963",SZ:"268",TC:"1 649",TD:"235",TF:"260",TG:"228",TH:"66",TJ:"992",TK:"690",TL:"670",TM:"993",TN:"216",TO:"676",TR:"90",TT:"1 868",TV:"688",TW:"886",TZ:"255",UA:"380",UG:"256",UM:"1",US:"1",UY:"598",UZ:"998",VA:"39",VC:"1 784",VE:"58",VG:"1 284 ",VI:"1 340",VN:"84",VU:"678",WF:"681",WS:"685",YE:"967",YT:"262",ZA:"27",ZM:"260",ZW:"263"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.head,i=void 0===n?{}:n,s=u(t,["head"]),c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},f=(c.metricKey,c.errorFilter),p=void 0===f||f,d=u(c,["metricKey","errorFilter"]),h=r({head:r({},l,i)},s);return(0,o.default)(r({url:e,method:"post",withCredentials:!0,headers:{"Content-Type":"application/json",cookieOrigin:window.location.origin||window.location.protocol+"//"+window.location.host},data:h},d)).then((function(e){var t=e.data;if(p){if(t&&t.responseHead){if(t.responseHead.errorCode)throw new Error(t.responseHead.showErrorMsg);return t}throw new Error((0,a.getLang)("key_register_defaultShowMsg"))}return t})).catch((function(e){throw e&&e.response?(0,a.getLang)("key_register_defaultShowMsg"):e.message}))};var o=c(n(71)),i=c(n(34)),a=n(25),s=c(a);function c(e){return e&&e.__esModule?e:{default:e}}function u(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}var l={group:s.default.getCookie("ibu_h5_group")||"ctrip",site:"",language:"",source:"WAP",currency:"",paymentCurrency:"",uID:"",iP:"",deviceID:"",version:"",isQuickBooking:0,clientID:"",token:"",tokenValidTime:"",aPIKey:"",clientSign:"",clientSignTime:0,serviceCode:"",locale:s.default.getCookie("ibu_h5_local")||i.default.language,osVersion:"",deviceBrand:"",deviceModel:"",ticket:""}},function(e,t,n){e.exports=n(72)},function(e,t,n){"use strict";var r=n(12),o=n(42),i=n(74),a=n(36);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=s(a);c.Axios=i,c.create=function(e){return s(r.merge(a,e))},c.Cancel=n(46),c.CancelToken=n(87),c.isCancel=n(45),c.all=function(e){return Promise.all(e)},c.spread=n(88),e.exports=c,e.exports.default=c},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(36),o=n(12),i=n(82),a=n(83);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}})),o.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}})),e.exports=s},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(44);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(12);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(12),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(12);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(12);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(12);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(12),o=n(84),i=n(45),a=n(36),s=n(85),c=n(86);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!s(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(46);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(34);(r=o)&&r.__esModule;var i={customerLogin:"/restapi/soa2/13601/bjjson/customerLogin",autoRegister:"/restapi/soa2/13601/bjjson/autoRegister",customerRegister:"/restapi/soa2/13601/bjjson/customerRegister",signInAsThirdparty:"/restapi/soa2/13601/bjjson/signInAsThirdparty",signInBindThirdparty:"/restapi/soa2/13601/bjjson/signInBindThirdparty",autoCompleteMail:"/restapi/soa2/14739/bjjson/getEmailAutoList",customerMarketing:"/restapi/soa2/13601/bjjson/customerMarketing",emailCodeSender:"/restapi/soa2/13601/bjjson/emailCodeSender",emailCodeChecker:"/restapi/soa2/13601/bjjson/emailCodeChecker",sendResetPasswordCaptcha:"/restapi/soa2/13601/bjjson/sendResetPasswordCaptcha",resetPasswordByCaptcha:"/restapi/soa2/13601/bjjson/resetPasswordByCaptcha",getPasswordRuleJson:"/restapi/soa2/13601/bjjson/getPasswordRuleJson",getCustomerService:"/restapi/soa2/11296/json/ListAllServiceTel",resetPasswordByToken:"/restapi/soa2/13601/bjjson/resetPasswordByToken",checkThirdPartyLoginStatus:"/restapi/soa2/13601/bjjson/checkThirdPartyLoginStatus",getIpInfo:"/m/commonapi/getIpInfo",webwidgetquery:"/restapi/soa2/18814/webWidgetQuery",getAidAndSid:"/restapi/soa2/14524/bjjson/getAidAndSid",getOuid:"/restapi/soa2/14524/bjjson/getOuid",marketSubscrber:"/restapi/soa2/13175/bjjson/subscribe",gdprCheck:"/restapi/soa2/14610/bjjson/check",SendEmailVerifyCode:"/restapi/soa2/12891/bjjson/SendEmailVerifyCode",CheckVerifyCode:"/restapi/soa2/12891/bjjson/CheckVerifyCode",GuestToMember:"/restapi/soa2/12891/bjjson/GuestToMember",writeI18nTicket:"ssoproxy/ssoCrossI18NSetCookie",h5NotifyInfo:"/restapi/soa2/13175/bjjson/h5NotifyInfo",getSurveyTitle:"/restapi/soa2/15393/bjjson/getSurveyTitle",saveSurvey:"/restapi/soa2/15393/bjjson/saveSurvey",orderSurveyQuery:"/restapi/soa2/15393/bjjson/orderSurveyQuery"};t.default=i},function(e,t,n){"use strict";var r=n(91),o=n(94);window.__FORBID_AUTO_WAKEUP__||(0,o.autoAwake)((function(e){return e&&(0,r.deeplink)()})),e.exports={deeplink:r.deeplink,wakeup:r.wakeUpApp,open:r.open}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wakeUpApp=f,t.deeplink=p,t.open=function(){return f("/",(function(){}))};var r=c(n(25)),o=c(n(35)),i=n(92),a=n(47),s=n(93);function c(e){return e&&e.__esModule?e:{default:e}}function u(e,t){!function(e,t,n){(0,o.default)({type:"POST",url:"/restapi/soa2/13618/json/getUniversalLink",async:!0,contentType:"application/json",data:JSON.stringify({head:{site:"String",source:"online",currency:"String",paymentCurrency:"String",uID:"String",iP:"String",deviceID:"String",version:"String",isQuickBooking:0,clientID:"String",token:"String",tokenValidTime:"String",aPIKey:"String",clientSign:"String",clientSignTime:0,serviceCode:"String",locale:r.default.getCookie("ibu_h5_local")||r.default.getCookie("ibulocale")||"en-us",osVersion:"String",deviceBrand:"String",deviceModel:"String",ticket:"String"},targetSource:"APP",sourceRefererUrl:document.referrer,sourceUrl:e}),dataType:"json",success:function(e){return e.responseHead&&e.responseHead.ErrorCode?n({ErrorCode:e.responseHead.ErrorCode,ErrorMessage:e.responseHead.ErrorMessage||"server busy"}):t(e.targetUrl||"/")},error:function(e){return n({ErrorCode:"003",ErrorCodeText:"Server busy"})}})}(e,(function(e){return f(e,t)}),t)}function l(e){var t=+new Date;var n,r=0;n=setInterval((function(){r++;var o=+new Date-t;(r>=300||o>7e3)&&(clearInterval(n),function(t){!!(t>7e3||document.hidden||document.webkitHidden)||e&&e({ErrorCode:"005",ErrorCodeText:"wakeup app failed"})}(o))}),20)}function f(e,t){(0,i.log)(e),/^ctripglobal\:\/\//.test(e)&&(e=e.replace("ctripglobal://",""));var n="ctripglobal://"+function(e){var t=/^\/m/.test(window.location.pathname)?"h5":"online";return e+(t=(/\?/.test(e)?"&":"?")+"fromjs="+t)}(e);if((0,a.isBlockedBrowser)())return t&&t({ErrorCode:"004",ErrorCodeText:"deeplink is not support for current device"});(0,a.isPassedBrowser)()?(0,s.wakeupByClickLabelA)(n):(0,a.isIE)()||(0,a.isSafari)()&&(0,a.isIOS)()?(0,s.wakeupByLocationHref)(n):(0,s.wakeupByIframe)(n),l((function(e){(0,i.logFail)(p),t(e)}))}function p(){var e=Array.prototype.slice.call(arguments),t=e.length,n=function(e){console.log(e)},r=location.href;return 1===t?e[0]instanceof Function?n=e[0]:"String"===e[0].__proto__.constructor.name&&""!==e[0]&&(r=e[0]):t>=2&&(r=e[0],n=e[1]),u(r,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.log=function(e){s("ibu_pub_deeplink_wake_action",e)},t.logFail=function(e){s("ibu_pub_deeplink_wake_failure_action",e)};var o,i=n(25),a=(o=i)&&o.__esModule?o:{default:o};function s(e,t){var n=window.location.href,o=a.default.parseUnionCookie();(0,i.tracklog)(e,JSON.stringify(r({url:n,deeplink:t},o)))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wakeupByIframe=function(e){var t=document.createElement("iframe");t.src=e,t.style.display="none",document.body.appendChild(t),setTimeout((function(){document.body.removeChild(t)}),5e3)},t.wakeupByLocationHref=function(e){window.location.href=e},t.wakeupByClickLabelA=function(e){var t=document.createElement("a");t.setAttribute("href",e),t.style.display="none",document.body.appendChild(t),t.click();var n=document.createEvent("HTMLEvents");n.initEvent("click",!1,!1),t.dispatchEvent(n),setTimeout((function(){document.body.removeChild(t)}),5e3)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoAwake=function(e){!function(e){var t=window.location.pathname,n=r.default.parseUnionCookie(),i=n.aid,a=n.sid;(0,o.default)({type:"POST",url:"/m/home/getAwakeConditions",async:!0,contentType:"application/json",data:JSON.stringify({aid:i,sid:a,path:t}),success:function(t){e(t&&t.status||"1")},error:function(){e("1")}})}((function(t){if("1"!==t){var n=function(){var e=r.default.getQueryString("openapp");if("3"===e)return"1";if("1"===e)return(0,i.isAndroid)()?"1":"2";if("2"===e)return(0,i.isIOS)()?"1":"2";var t=r.default.getQueryString("autoawaken");if("close"===t)return"2";if("open"===t)return"1";return"3"}();"1"!==n?"2"!==n?e("2"===t):e&&e(!1):e&&e(!0)}else e&&e(!1)}))};var r=a(n(25)),o=a(n(35)),i=n(47);function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return Oe}));var r=n(2),o=n.n(r),i=n(9),a=n(14),s=n(1),c=n(0),u=null,l={},f=null,p=null,d=[],h=!0,m=function(e,t){u=e,f=l[t]=e.state.Page[0],d.push(t),u.onTransitionEnd=function(e){"article"===e.target.tagName.toLowerCase()&&(f.fclass="",f.show="none",u.setState({Page:u.state.Page}),f=p,p=null,h=!0)}},g=function(){return d[d.length-1]},y=null,v=null,_=null,b=null,w=null,O=Object(s.d)(),E=n(10),S=function(e,t,n,r,o,a){try{if(Object(s.d)().isMiniProgram&&a){var f={url:encodeURIComponent(location.origin+e),needLogin:!0},m="/cwx/component/cwebview/cwebview?data="+JSON.stringify(f);return void wx.miniProgram.navigateTo({url:m})}}catch(e){}if(_)i.a.sendPVFlag=!1,_(e,t,n);else{var g=Object(s.d)().platform;if(o&&window.CtripUtil)return void window.CtripUtil.app_open_url(e,2);if(e.indexOf("//")>-1&&r)window&&window.open(e);else if(e.indexOf("//")>-1)g===c.f.Hybrid&&window.CtripUtil?-1==e.indexOf("ctrip://")?window.CtripUtil.app_open_url(e,2):window.CtripUtil.app_open_url(e,1):location.href=e;else if(0===e.indexOf("/")){if(Object(E.d)()&&e.indexOf("/pages/")>-1)return void window.cmpBridge.navigateTo({url:e});m=""+(Object(s.f)().channel===c.c.trip&&g===c.f.H5&&"/m/"!==e.slice(0,3)?"/m"+e:e);!r&&(location.href=m),r&&window&&window.open(m)}else!function(e,t,n){h&&(null==l[e]?(l[e]={Component:t,fclass:"slideVertical",show:""},u.state.Page.push(l[e])):l[e].show="",p=l[e],d.push(e),l[e].fclass="slideVertical",u.setState({Page:u.state.Page},(function(){setTimeout((function(){l[e].fclass="slideVertical slideUp",l[e].data=n,u.setState({Page:u.state.Page})}))})))}(e,t,n)}},C=function(e){v?v(e):e&&(e.indexOf("//")>-1||0===e.indexOf("/"))?history.length>1?history.back():Object(s.d)().isInApp?O.isInApp&&O.platform===c.f.H5&&window.CtripPage&&window.CtripPage.back&&window.CtripPage.back():S(e):function(e){e=d.pop();var t=d[d.length-1];f=l[e],p=l[t],h=!1,l[e].fclass="slideVertical",l[t].show="",u.setState({Page:u.state.Page})}(e)},j=function(e,t,n){b&&b(e,t,n)},T=function(e,t,n){(w||m)(e,t,n)},P=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(y||g).apply(void 0,e)},k=n(22),A=n(32);class x extends o.a.Component{constructor(e){super(e),this.IBUShark=(e,t,n,r)=>Object(k.a)(e,t,n,r),this.log=i.b,this.http=(e,t)=>{e?e.pageId=P():t.pageId=P(),Object(a.a)(e,t)},this.toast=A.a,this.push=S,this.pop=C,this.replace=j,this.isDarkmode=()=>Object(s.f)().channel===c.c.trip&&"dark"===this.context&&Object(s.f)().platform===c.f.RN,this.componentAfterFistScreen&&setTimeout(()=>{this.componentAfterFistScreen()},200)}componentWillUpdate(e,t,n){this.props.style&&"none"===this.props.style.display&&setTimeout(()=>{this.componentShow()})}componentShow(){}get Head(){const e=Object(s.f)(),t=Object(s.d)();return e.channel===c.c.ctrip?{ver:"8.3.1",debug:!1,pageid:P(),head:{cid:t.cid,syscode:e.platform==c.f.RN?"12":"09"},contentType:"json"}:{head:{syscode:"",lang:"",auth:"",cid:t.cid,ctok:"",cver:"",sid:"8888",extension:[],pauth:"",sauth:"",appid:"100017626"},clientInfo:{platformId:Object(s.f)().platform===c.f.RN?25:Object(s.f)().platform===c.f.H5?26:24,version:"",location:{lat:"0.0",lon:"0.0",cityId:0,locatedCityId:0},locale:t.language,currency:t.currency}}}}var D=x;class R extends D{constructor(e){super(e)}}var N,I,M=n(26),B=n.n(M),L=n(4);(I=N||(N={})).all="all",I.latlon="latlon";var U,q=null,F=null,K=function(){function e(){this.eventHandlerList=[],this.startGetLocation=!1}return e.prototype.getLocationCache=function(){var e=Object(s.d)().language,t=L.a.get("location-"+e);t?(this.result=t,this.handlerEventList()):this.result={}},e.prototype.isNeedEnquier=function(e){var t=L.a.get("last-enquire"),n=(new Date).getTime();return(!t||n-t>e)&&(L.a.set("last-enquire",n),!0)},e.prototype.getLocationPermission=function(){var e=this;return new Promise((function(t,n){var r=Object(s.f)().platform;r===c.f.RN?Object(s.f)().channel===c.c.ctrip?F.checkLocationPermissionTimeRestrict((function(e){console.log("getLocationPermission",e),t(1==e.granted)})):t(!0):Object(s.e)()||r===c.f.Online?t(!1):navigator.geolocation&&e.isNeedEnquier(216e5)?navigator.geolocation.getCurrentPosition((function(){return t(!0)}),(function(e){1===e.code&&t(!1),t(!0)}),{timeout:2e3}):t(!1)}))},e.prototype.getLocation=function(e){var t=this;this.getLocationCache();var n=Object(s.f)().platform;if(n===c.f.RN)q((function(e,n){n?t.handlerEventList("location定位失败"):t.result=e,t.handlerEventList()}),e);else if(n===c.f.Online||Object(E.a)())this.handlerEventList("online不支持定位");else{if(Object(s.e)())return void this.handlerEventList("location定位失败");if(this.startGetLocation)return;this.startGetLocation=!0,navigator.geolocation&&navigator.geolocation.getCurrentPosition((function(e){t.result={latitude:e.coords.latitude,longitude:e.coords.longitude},t.handlerEventList(),t.getCityId()}),(function(){t.handlerEventList("location定位失败")}),{timeout:2e4})}},e.prototype.getCityId=function(){var e=this,t=this.result;Object(a.a)({request:{lat:t.latitude,lng:t.longitude,IsGsLocation:Object(s.f)().channel!==c.c.trip},actionUrl:"17073/json/lbs/getcurrentcity?"+Math.random(),success:function(n){t.cityId=n.CityId,t.cityName=n.CityName,e.handlerEventList(),L.a.set("location-"+Object(s.d)().language,t,180)}})},e.prototype.handlerEventList=function(e){var t=this,n=this.result,r=0;this.eventHandlerList.map((function(o,i){var a=null!=e;a?(o.locationCallBack(null,e),t.startGetLocation=!1):(o.LocationType===N.all&&n.cityId||o.LocationType===N.latlon)&&(o.locationCallBack(n),a=!0),a?setTimeout((function(){t.eventHandlerList.splice(r,1)})):r++})),null!=n.cityId&&(this.startGetLocation=!1)},e.getLocation=function(t,n,r,o){var i=this;void 0===n&&(n=N.all),void 0===r&&(r=!1),this.instance||(this.instance=new e),this.instance.eventHandlerList.push({locationCallBack:t,LocationType:n}),r?this.instance.getLocationPermission().then((function(e){e?i.instance.getLocation(o):i.instance.handlerEventList("定位权限未开")})):this.instance.getLocation(o)},e.getLocationPermission=function(){return Promise.resolve(this.instance.getLocationPermission())},e}(),W=n(7),H=function(e,t){t?(e&&(e.scrollTop=document.body.scrollTop||document.documentElement.scrollTop),document.body.style.cssText=(e?"top: -"+e.scrollTop+"px;":"")+" position: fixed; left:0; right:0; overflow-y: hidden"):(document.body.style.cssText="position: initial; top:0px ; left:0; right:0; overflow-y: auto",document.documentElement.style.cssText="scroll-behavior: initial;",e&&(document.body.scrollTop=e.scrollTop,document.documentElement.scrollTop=e.scrollTop,document.documentElement.style.cssText="scroll-behavior: smooth;"))},V=n(3),G=n(15),J=function(e,t){V.b.get(t||"poplayer").assistComponent.props.visible=!1,V.b.get(t||"poplayer").assistComponent.props.hideInstant=!!e,V.b.change(t||"poplayer"),Object(G.a)()},z={show:function(e){e.props||(e.props=V.b.get("tooltip").assistComponent.props);var t=e.props.name||"tooltip";e.props.visible?(V.b.get(t).assistComponent.props.visible=!1,V.b.get(t).assistComponent.props.hideInstant=!0,e.props.init=!1,V.b.change(t),setTimeout((function(){e.props.visible=!0,V.b.change(t,e)}),0)):(e.props.visible=!0,e.props.init=!1,V.b.change(t,e)),Object(G.b)()},hide:function(e,t){V.b.get(t||"tooltip").assistComponent.props.visible=!1,V.b.get(t||"tooltip").assistComponent.props.hideInstant=!!e,V.b.change(t||"tooltip"),Object(G.a)()},changeTimeOutId:function(e){V.b.get("tooltip").timeoutId=e},getTimeOutId:function(){return V.b.get("tooltip")&&V.b.get("tooltip").timeoutId},init:function(e){var t=e.name||"tooltip",n=V.b.get("tooltip").assistComponent;n.props.content=e.content,n.props.init=e.init,n.props.visible=!0,V.b.change(t)},isShow:function(e){return V.b.get(e||"tooltip").assistComponent.props.visible}},Q=n(21),$=(U=function(e,t){return(U=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}U(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Y=function(e){function t(t){var n=e.call(this,t)||this;return n.isCtrip=Object(s.f)().channel==c.c.ctrip,n.fadeAnimation=Object(W.c)(0),n.slideFromBottomAnimation=Object(W.c)(0),n.slideFromTopAnimation=Object(W.c)(0),n.onClose=n.onClose.bind(n),n.state={popVisible:t.visible,initAnimation:0},n.maxHeight=.85*Object(s.d)().height,n.minHeight=.4*Object(s.d)().height,n.bindEvent(),n.propVisible=!1,n}return $(t,e),t.prototype.bindEvent=function(){Object(s.f)().platform==c.f.Online&&(document.onclick=function(e){var t=V.b.get();for(var n in t){var r=t[n].assistComponent,o=r.props,i=r.current;if("poplayer"==o.component&&1==o.visible){var a=e||window.event,s=a.target||a.srcElement;if(e.srcElement&&s!=i.poplayerRef&&!i.poplayerRef.contains(s))i.onClose();else{var c=i.poplayerRef.compareDocumentPosition(s);s!=i.poplayerRef&&20!=c&&0!=c&&i.onClose()}}}})},t.prototype.componentWillReceiveProps=function(e){var t=this;if(e.name&&(V.b.get(e.name).assistComponent.current=this),e.visible!=this.props.visible||e.name!=this.props.name){var n,r=e.visible,o=e.animation,i=e.hideInstant,a=e.noOverflowHidden;if(r){if(this.setState({popVisible:!0}),Object(s.f)().platform===c.f.H5&&H(this,!0),Object(s.f)().platform===c.f.Online&&!a)(n=document.getElementsByTagName("body")[0]).style.overflow="hidden",n.style.paddingRight="6px",n.className=n.className+" m_poplayer_show"}else if(Object(s.f)().platform!==c.f.H5||this.props.noChangeScroll||H(this,!1),Object(s.f)().platform===c.f.Online&&!a)(n=document.getElementsByTagName("body")[0]).style.overflow="",n.style.paddingRight="0px",n.className=n.className.replace(" m_poplayer_show","");if(this.propVisible=r,!r&&i)this.setState({popVisible:!1});else{if(Object(s.f)().platform===c.f.RN&&o)switch(o){case"fade":this.initAnimation=this.fadeAnimation,Object(W.a)(this.initAnimation,r?1:0,200,(function(){r||t.setState({popVisible:!1})}));break;case"slideFromBottom":this.initAnimation=this.slideFromBottomAnimation,Object(W.a)(this.initAnimation,r?1:0,250,(function(){r||t.setState({popVisible:!1},(function(){}))}));break;case"slideFromTop":this.initAnimation=this.slideFromTopAnimation,Object(W.a)(this.initAnimation,r?1:0,300,(function(){t.propVisible!=r||r||t.setState({popVisible:r})}));break;case"slideFromRight":this.initAnimation=this.slideFromTopAnimation,Object(W.a)(this.initAnimation,r?1:0,350,(function(){t.propVisible!=r||r||t.setState({popVisible:!1})}))}else o?Object(W.a)(this,{initAnimation:0,animationStyle:o+"_in"}):r||this.setState({popVisible:!1});r&&setTimeout((function(){Object(W.a)(t,{initAnimation:1,animationStyle:""})}),0)}}},t.prototype.onTransitionEnd=function(e){this.props.visible||this.setState({popVisible:!1}),Object(s.f)().platform==c.f.RN||this.props.noOverflowHidden||(document.getElementsByTagName("body")[0].style.overflow=this.props.visible?"hidden":""),this.props.onTransitionEnd&&this.props.onTransitionEnd()},t.prototype.onClose=function(e){"mask"===e&&this.props.maskClose||(J(!1,this.props.name||""),this.props.onClose&&this.props.onClose(this.props.name))},t.prototype.onScroll=function(){z&&z.isShow&&z.isShow()&&z.hide()},t}(Q.a),X=n(53),Z=n.n(X),ee=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),te=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r},ne=function(e){function t(t){return e.call(this,t)||this}return ee(t,e),t.prototype._setNativeProps=function(e){Object(s.f)().platform===c.f.RN?this.iconRef&&this.iconRef.setNativeProps({style:e}):Object(s.f)().platform===c.f.H5&&this.iconRef&&function(e,t){if(Object(s.f)().platform!==c.f.RN&&e)e.style.cssText=t}(this.iconRef,"color:"+e.color)},t.prototype.getStyleReduce=function(e){return e?e instanceof Array?e[0]instanceof Array?e.reduce((function(e,t){return void 0===e&&(e=[]),te(e,t)})).reduce((function(e,t){return void 0===e&&(e={}),Object.assign({},e,t)})):e.reduce((function(e,t){return void 0===e&&(e={}),Object.assign({},e,t)})):{color:e.color||"#333"}:{color:"#333"}},t}(o.a.Component),re=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),oe=function(){return(oe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ie=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},ae=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t.prototype.render=function(){var e,t=this,n=this.props,r=n.type,i=n.suffixClass,a=n.className,s=ie(n,["type","suffixClass","className"]),c=Z()("u_icon_ttd "+a,((e={})["u_icon_"+r]=r,e["u_icon_"+i]=i,e));return o.a.createElement("i",oe({},s,{className:c,ref:function(e){return t.iconRef=e}}))},t}(ne),se=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ce=function(){return(ce=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ue=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return se(t,e),t.prototype.render_head=function(){var e=this.props,t=e.title,n=e.closeIcon,r=void 0===n?{}:n,i=e.closeId,a=void 0===i?"":i,u=Object(s.f)().channel==c.c.ctrip?"cancel":"close";return o.a.createElement("div",{className:"m_poplayer_header"},o.a.createElement("div",{className:"m_poplayer_close_btn",id:a,onClick:this.onClose.bind(this)},o.a.createElement(ae,{type:r.iconType||u,size:r.size||20,suffixClass:"poplayer",isSvg:r.isSvg||!1})),t?o.a.createElement("header",{className:"m_poplayer_title"},t):null)},t.prototype.render=function(){var e=this,t=this.props,n=t.fclass,r=t.fstyle,i=void 0===r?{}:r,a=t.children,c=t.scrollEnabled,u=void 0===c||c,l=t.top,f=t.animation,p=void 0===f?"":f,d=t.autoClose,h=t.maxHeight,m=t.minHeight,g=t.maskClose,y=void 0===g?"Online"!=Object(s.f)().platform:g,v=t.showHeader,_=void 0===v||v,b=this.state,w=b.popVisible,O=b.initAnimation,E=b.animationStyle,S=y?{onClick:this.onClose.bind(this,"mask")}:{},C=Object.assign({},i);return"slideFromTop"===p&&"number"==typeof l&&(C.top=l),w?o.a.createElement("div",{className:"m_poplayer "+(this.isCtrip?"m_poplayer_ctrip":"")+" "+p+" "+n,ref:function(t){e.poplayerRef=t},style:C},"slideFromTop"!==p||u?o.a.createElement("div",ce({className:"m_poplayer_mask_touch"},S),o.a.createElement("div",{className:"m_poplayer_mask "+(O?"":"fade_in"),onTransitionEnd:this.onTransitionEnd.bind(this)})):o.a.createElement("div",{className:"m_poplayer_mask "+(O?"":"fade_in"),onTransitionEnd:this.onTransitionEnd.bind(this)}),o.a.createElement("div",{className:"m_poplayer_content "+E},"slideFromBottom"===p?null:this.render_head(),u?d?o.a.createElement("div",{className:"m_poplayer_child_wrapper"},o.a.createElement("div",ce({className:"m_poplayer_content_btn m_poplayer_content_btn_autoClose"},S),a)):o.a.createElement("div",{className:"m_poplayer_child_wrapper",style:{maxHeight:h,minHeight:m}},"slideFromBottom"===p&&_?this.render_head():null,a):o.a.createElement("div",{className:"m_poplayer_child_wrapper"},o.a.createElement("div",ce({},S,{className:"m_poplayer_mask_touch"})),o.a.createElement("div",{className:"m_poplayer_content_container",style:{maxHeight:h,minHeight:m}},"slideFromBottom"===p&&_?this.render_head():null,o.a.createElement("div",{className:"slideFromBottom"===p?"m_poplayer_content_childs_scroll":"m_poplayer_content_childs"},o.a.createElement("div",{className:"m_poplayer_content_child_inner",onScroll:this.onScroll.bind(this)},a)))))):o.a.createElement("div",null)},t}(Y);V.b.add("poplayer",ue,{props:{visible:!1,component:"poplayer"}});var le=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),fe=function(e){function t(t){var n=e.call(this,t)||this,r=(n.props.animatedCustomConfig||{from:{value:0}}).from,o=Object(W.c)(r.value);return n.state={fadeAnim:o},n}return le(t,e),t.prototype.componentDidMount=function(){var e=this.props,t=e.animatedInterval,n=e.animatedCustomConfig||{from:{value:0,delay:0,duration:1e3},to:{value:1,delay:0,duration:1e3}},r=n.to,o=n.from;this.ani=this.createAnimatedStagger(this.state.fadeAnim,t||5e3,r,o)},t.prototype.createAnimatedStagger=function(e,t,n,r){var o=this;return Object(W.d)(t,[{el:e,toValue:n.value,delay:n.delay,duration:n.duration,useNative:n.useNative||!0},{el:e,toValue:r.value,delay:r.delay,duration:r.duration,useNative:r.useNative||!0}],Object(s.f)().platform===c.f.RN?null:function(e){o.setState({fadeAnim:e})})},t.prototype.getAnimatedStyle=function(e,t){var n={};if("fade"===e)n[t=t||"opacity"]=this.state.fadeAnim,"opacity"==t&&0==this.state.fadeAnim&&(n.zIndex=-1);else if({translateY:!0,translateX:!0}[t]){var r={};Object(s.f)().platform===c.f.RN?(r[t]=this.state.fadeAnim,n.transform=[r,{perspective:1e3}]):n.transform=t+"("+this.state.fadeAnim+"px)"}else n[t]=this.state.fadeAnim;return n},t.prototype.closeHandle=function(e,t){this.ani&&this.ani.stop&&this.ani.stop(),e=e||{value:0,duration:1e3},Object(W.a)(Object(s.f)().platform===c.f.RN?this.state.fadeAnim:this,Object(s.f)().platform===c.f.RN?e.value:{fadeAnim:e.value},e.duration,(function(){}),e.useNative||!0),t&&t()},t}(Q.a),pe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),de=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return pe(t,e),t.prototype.render=function(){var e=this.props,t=e.animated,n=e.animatedCustomConfig,r=void 0===n?{}:n,i=e.isShowClose,a=e.iconType,s=e.iconSize,c=e.content,u=e.fclass,l=e.closeCallBack,f=e.visible,p=r.styleName,d=r.from;return Object.keys(r).length>0?o.a.createElement("div",{className:"m_toast_container "+u,style:this.getAnimatedStyle(t,p)},o.a.createElement("div",{className:"m_toast_content"},o.a.createElement("div",{className:"m_toast_box m_toast_box_"+t+" "+(i?"m_toast_box_withclose_"+t:"")},a&&o.a.createElement(ae,{type:a,size:s||16,className:"m_title_icon m_title_icon_"+t,isSvg:!0}),o.a.createElement("span",{className:"m_toast_span m_toast_span_"+t},c)),i&&o.a.createElement("div",{className:"m_close_box m_close_box_"+t,onClick:this.closeHandle.bind(this,d||{},l)},o.a.createElement(ae,{type:"close",className:"m_close_icon",size:s||14,color:"#FFF"})))):o.a.createElement("div",{className:"m_toast "+(f?"m_toast_show":"m_toast_hide")},c)},t}(fe),he=n(16);V.b.add(he.a,de,{props:{visible:!1}});var me=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ge=function(){return(ge=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},ye=function(e){function t(t){var n=e.call(this,t)||this;n.state={assistComponent:V.a};var r=n.props,o=r.isBody,i=r.exclude;return o?V.b.register(n):V.b.registerInner(n,i),n}return me(t,e),t.prototype.renderItem=function(e,t){var n=V.a[e].component,r=V.a[e].assistComponent.props,i=V.a[e].assistComponent.child,a=V.a[e].assistComponent.childProps;return o.a.createElement(n,ge({key:t},r,{style:{display:r.visible?"":"none"}}),i&&o.a.createElement(i,ge({},a)))},t.prototype.render=function(){var e=this,t=this.state.assistComponent,n=this.props,r=n.include,i=n.exclude;return o.a.createElement(o.a.Fragment,null,Object.keys(t).map((function(t,n){return r&&r.length&&r.indexOf(t)>-1?e.renderItem(t,n):i&&i.length&&i.indexOf(t)>-1?null:e.renderItem(t,n)})))},t}(o.a.Component);n(67);Object(s.e)()||document.body.scrollTo||(Element.prototype.scrollTo=function(e){this.scrollLeft=e.left,this.scrollTop=e.top});var ve=n(54),_e=n.n(ve);const be=Object(r.createContext)();class we extends o.a.Component{constructor(e){super(e),this.state={Page:[],fclass:"",assistComponent:V.a};const{page:t,pageId:n,data:r,needLocation:o=!0}=this.props;this.state.Page=[{fclass:"",Component:t,show:"none",data:r}],Object(i.c)({pageId:n,url:location.href}),L.a.register(),T(this,n),o&&function(e,t,n,r){void 0===r&&(r=!1),K.getLocation(e,t,n,r)}(()=>{})}onTransitionEnd(){}render(){const e=document.body.classList.value||document.body.classList[0]||"";let t=Object(s.d)().channel===c.c.ctrip?"m_ctrip":"m_trip";return e.indexOf(t)>-1&&(t=""),o.a.createElement(o.a.Fragment,null,o.a.createElement("section",{className:t,onTransitionEnd:this.onTransitionEnd.bind(this)},Object(s.d)().channel===c.c.trip&&o.a.createElement(_e.a,null),this.state.Page.map((e,t)=>{let{Component:n,fclass:r,show:i,data:a}=e;return o.a.createElement(n,Object.assign({className:r,style:{display:i},key:t},a))})))}}class Oe extends R{constructor(e){super(e)}start(){this.http({request:{ver:"8.30.0",debug:!1,pageid:"10650044531",contentType:"json",head:{cid:"32001136710145673869",syscode:"12",cver:"830.000",auth:"9ABB0EAE92CBA57ADFE252F50B2362E4B70973BAC356A950305401CA70186EA0",extension:[{name:"crnSecrectKey",value:"5F3FA7046D6243C4DC43B1957D0732AD475166EA5FA24E482845B3C25C8B62815FA12B4B02BA015800CB026A00CB02BA00CB0242024202BA029D026A011300F00242015400CB00E501580113009600F001580154024500F0021202B402630125025601130124009400F6015800740299012700740245024201C4027402990242025C0203016802030118017B017B02BA01BD00CB01EB0212015400CB024201C4"},{name:"platformType",value:"android"},{name:"timestamp",value:"1604472392875"}]},clientInfo:{pageId:"10650044531",version:"8.30.0",platformId:null,crnVersion:"2020-11-02 17:50:37",location:{lat:"",lon:"",cityId:null,locatedCityId:null,districtId:null,locatedDistrictId:null},locale:"zh-CN",currency:"CNY"},spotid:66560},actionUrl:"https://m.ctrip.com/restapi/soa2/12530/json/getProductShelf",success:e=>{}})}render(){return o.a.createElement("button",{onClick:()=>{this.start()}},"111")}}((e,t,r,i,a)=>{if(Object(s.e)())return;["10650021557","10650012750","10650012751"].indexOf(t)>-1&&n(90);let c=document.createElement("div");c.setAttribute("id","ottd-smart-tools"),document.body.appendChild(c),B.a.render(o.a.createElement(be.Provider,{value:t},o.a.createElement(we,{page:e,pageId:t,data:r,needLocation:a})),document.getElementById(i||"ottd-smart-platform")),B.a.render(o.a.createElement(ye,{isBody:!0,exclude:["tooltip"]}),document.getElementById("ottd-smart-tools"))})(Oe,"10650021557")},function(e,t,n){"use strict";n.r(t),n.d(t,"buildQuery",(function(){return r.a})),n.d(t,"parseQuery",(function(){return r.c})),n.d(t,"promiseTimeout",(function(){return r.e})),n.d(t,"promiseAbort",(function(){return r.d})),n.d(t,"isAbortable",(function(){return r.b})),n.d(t,"validStatus",(function(){return r.f})),n.d(t,"RequestError",(function(){return o.b})),n.d(t,"isRequestError",(function(){return o.g})),n.d(t,"TimeoutError",(function(){return o.d})),n.d(t,"isTimeoutError",(function(){return o.h})),n.d(t,"AbortError",(function(){return o.a})),n.d(t,"isAbortError",(function(){return o.f})),n.d(t,"setDefaultErrorHandler",(function(){return i.b})),n.d(t,"request",(function(){return a.a})),n.d(t,"createSoaAgent",(function(){return l})),n.d(t,"jsonp",(function(){return d})),n.d(t,"trackAjax",(function(){return h.a})),n.d(t,"trackAjaxFail",(function(){return h.b})),n.d(t,"trackAjaxSuccess",(function(){return h.c}));var r=n(13),o=n(6),i=n(27),a=n(20),s=function(e,t,n,r,i){var a=i.serviceCode;if(e){var s=e.responseStatus||e.ResponseStatus,c=s&&(s.ack||s.Ack),u=e.ResponseHead||e.responseHead,l=u&&(u.Code||u.code);if(c&&"success"!==c.toLowerCase()||l&&200!==Number(l))throw new o.c(e,{method:t,params:n,serviceCode:a})}};function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){return"".concat("/restapi/soa2","/").concat(e,"/json/").concat(t)}var l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.headKey,o=void 0===n?null:n,i=t.getHead,l=void 0===i?function(){return{}}:i,f=t.invalidResponse,p=void 0===f?s:f,d=t.getRequestURL,h=void 0===d?u:d,m=function t(n,i){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!n)return Object(r.d)(Promise.reject(new Error("miss method")));var u=s.query,f=s.timeout,d=s.head,m=s.headers,g=s.responseIncludeHeaders,y=void 0!==g&&g,v=h(e,n)+(u?"?".concat(Object(r.a)(u)):"");if(o&&i&&!(o in i)){var _=l(t.getData());i[o]=Object.assign({},_||{},d||{})}var b=Object(a.a)({url:v,method:"POST",data:i,timeout:f,headers:m,transformResponse:function(t,r){var o=r.headers;return p&&p(t,n,i,s,{serviceCode:String(e)}),y&&"object"===c(t)&&null!==t&&(t["SOA.ResponseHeaders"]=o),t}});return b};return m._data={},m.setData=function(e){m._data=e},m.getData=function(){return m._data},m},f=function(e,t){var n=document.createElement("script");n.src=e,n.async=!0,n.onerror=function(e){return t(e)},document.body.appendChild(n)},p=1;function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.callbackKey,i=void 0===o?"callback":o,s=n.useAjax,c=void 0!==s&&s,u=n.timeout,l=void 0===u?0:u,d="TripHelperJSONPCallback".concat(p++);t[i]=d;var h="".concat(e,"?").concat(Object(r.a)(t)),m=new Promise((function(n,r){window[d]=function(e){n(e),delete window[d]},c?Object(a.a)({url:e,method:"GET",data:t,dataType:"script"}).catch(r):f(h,r)}));return l&&l>0?Object(r.e)(l,m):m}var h=n(17)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,